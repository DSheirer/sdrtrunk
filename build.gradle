/*
 * *****************************************************************************
 * Copyright (C) 2014-2022 Dennis Sheirer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * ****************************************************************************
 */
plugins {
    id 'application'
    id 'java'
    id 'idea'
    id 'org.beryx.runtime' version '1.12.7'
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

version = '0.5.0-beta5'
sourceCompatibility = '17'

sourceSets {
    main.java.srcDirs 'src/main'
    test.java.srcDirs 'src/test'
}

test {
    useJUnitPlatform()
}

dependencies {

    // JUnit Tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.8.0'
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
    testImplementation 'org.mockito:mockito-core:3.+'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    //Jitpack imports
    implementation 'com.github.dnault:libresample4j:master'
    implementation 'com.github.DSheirer.jmbe:jmbe-api:1.0.0'
    implementation 'com.github.nwaldispuehl:java-lame:v3.98.4'

    //mavenCentral/jcenter imports
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback:logback-core:1.2.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.2'
    implementation 'com.fazecast:jSerialComm:2.5.0'
    implementation 'com.github.jiconfont:jiconfont-font_awesome:4.7.0.1'
    implementation 'com.github.jiconfont:jiconfont-javafx:1.0.0'
    implementation 'com.github.jiconfont:jiconfont-swing:1.0.1'
    implementation 'com.github.wendykierp:JTransforms:3.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.guava:guava:27.0.1-jre'
    implementation 'com.jidesoft:jide-oss:3.6.18'
    implementation 'com.miglayout:miglayout-swing:5.2'
    implementation 'com.mpatric:mp3agic:0.9.1'
    implementation 'commons-io:commons-io:2.7'
    implementation 'eu.hansolo:charts:1.0.5'
    implementation 'io.github.dsheirer:radio-reference-api:15.1.8'
    implementation 'javax.usb:usb-api:1.0.2'
    implementation 'net.coderazzi:tablefilter-swing:5.4.0'
    implementation 'org.apache.commons:commons-compress:1.20'
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation 'org.apache.mina:mina-core:2.1.3'
    implementation 'org.apache.mina:mina-http:2.1.3'
    implementation 'org.controlsfx:controlsfx:11.1.0'
    implementation 'org.rauschig:jarchivelib:1.0.0'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.usb4java:libusb4java:1.3.0'
    implementation 'org.usb4java:usb4java:1.3.0'
    implementation 'org.usb4java:usb4java-javax:1.3.0'
    implementation 'io.github.dsheirer:libusb4java-darwin-aarch64:1.3.1' //usb4java native lib for OSX M1 cpu
    implementation 'pl.edu.icm:JLargeArrays:1.6'
}

/**
 * This is needed for the JDK17 vector API ... until it moves out of incubation
 */
tasks.withType(JavaCompile) {
    options.compilerArgs.add("--add-modules=jdk.incubator.vector") //Needed while Panama Vector API remains in incubator
}

application {
    mainClassName = "io.github.dsheirer.gui.SDRTrunk"
    applicationDefaultJvmArgs =
        ['--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED', //Needed for controls-fx.jar
         '--add-modules=jdk.incubator.vector',   //Needed while Panama Vector API remains in incubator
         '--add-exports=java.desktop/com.sun.java.swing.plaf.windows=ALL-UNNAMED'] //Windows Swing - jide-oss library
}

jar {
    manifest {
        attributes (
                'Implementation-Title'  : 'sdrtrunk project',
                'Implementation-Version' : archiveVersion,
                'Created-By'            : "Gradle ${gradle.gradleVersion}",
                'Build-Timestamp'       : new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-JDK'             : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']}",
                'Build-OS'              : "${System.properties['os.name']} (${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

/**
 * Runtime target OS and CPU image names.  We append version here so that version details are at end of zip filename.
 */
String targetLinuxAarch64 = 'linux-aarch64-v' + version
String targetLinuxX86_64 = 'linux-x86_64-v' + version
String targetOsxAarch64 = 'osx-aarch64-v' + version
String targetOsxX86_64 = 'osx-x86_64-v' + version
String targetWindowsX86_64 = 'windows-x86_64-v' + version

/**
 * Optional pre-downloaded Java Development Kit (JDK) for each target OS and CPU.  These locations are hard-coded to the
 * author's development environment, but can be changed to your environment if you want to use this build pattern.
 */
String jdk_base = '/home/denny/java_jdks/'
String jdk_linux_aarch64 = jdk_base + 'linux-arm64/jdk-18.0.1-full'
String jdk_linux_x86_64 = jdk_base + 'linux-x64/jdk-18.0.1-full'
String jdk_osx_x86_64 = jdk_base + 'osx-x64/jdk-18.0.1-full.jdk'
String jdk_osx_aarch64 = jdk_base + 'osx-arm64/jdk-18.0.1-full.jdk'
String jdk_windows_x86_64 = jdk_base + 'windows-x64/jdk-18.0.1-full'

boolean hasTargetJdks = file(jdk_linux_x86_64).exists() || file(jdk_linux_aarch64).exists() ||
        file(jdk_osx_x86_64).exists() || file(jdk_osx_aarch64).exists() || file(jdk_windows_x86_64).exists()

/**
 * Auto-download target JDKs.  Defaults to false, or the user can override via the gradle command line by
 * including this option: '-PdownloadJdks=true'
 */
boolean downloadJdks = project.hasProperty('downloadJdks') ? project.getProperty('downloadJdks') : false

/**
 * Beryx Runtime plugin for creating OS and CPU targeted build(s) of the software.
 *
 * Option 1: Create a single target build using the locally installed JDK, or optionally create target builds for
 * all OS and CPU targets when pre-downloaded target JDKs are available (see 'jdk_*' properties above).
 *
 *    >: gradle runtimeZip
 *
 * Option 2: Create all OS and CPU target builds by automatically downloading all JDKs needed to build the target images
 *
 *    >: gradle runtimeZip -PdownloadJdks=true
 */
runtime {
    //Build by automatically downloading JDKs for the OS and CPU targets
    if(downloadJdks) {
        println("Building all runtime images")
        println("The [ > jre: ] build phase downloads several target JDKs and this may take a while ... please wait")
        targetPlatform(targetLinuxAarch64) {
            jdkHome = jdkDownload("https://download.bell-sw.com/java/18.0.1+12/bellsoft-jdk18.0.1+12-linux-aarch64-full.tar.gz")
        }
        targetPlatform(targetLinuxX86_64) {
            jdkHome = jdkDownload("https://download.bell-sw.com/java/18.0.1+12/bellsoft-jdk18.0.1+12-linux-amd64-full.tar.gz")
        }
        targetPlatform(targetOsxAarch64) {
            jdkHome = jdkDownload("https://download.bell-sw.com/java/18.0.1+12/bellsoft-jdk18.0.1+12-macos-aarch64-full.tar.gz")
        }
        targetPlatform(targetOsxX86_64) {
            jdkHome = jdkDownload("https://download.bell-sw.com/java/18.0.1+12/bellsoft-jdk18.0.1+12-macos-amd64-full.tar.gz")
        }
        targetPlatform(targetWindowsX86_64) {
            jdkHome = jdkDownload("https://download.bell-sw.com/java/18.0.1+12/bellsoft-jdk18.0.1+12-windows-amd64-full.zip")
        }
    }
    //Build using pre-downloaded JDKs
    else if(hasTargetJdks) {
        println("Building all runtime images using pre-downloaded JDKs")
        if(file(jdk_linux_aarch64).exists()) {
            targetPlatform(targetLinuxAarch64, jdk_linux_aarch64)
        }
        if(file(jdk_linux_x86_64).exists()) {
            targetPlatform(targetLinuxX86_64, jdk_linux_x86_64)
        }
        if(file(jdk_osx_aarch64).exists()) {
            targetPlatform(targetOsxAarch64, jdk_osx_aarch64)
        }
        if(file(jdk_osx_x86_64).exists()) {
            targetPlatform(targetOsxX86_64, jdk_osx_x86_64)
        }
        if(file(jdk_windows_x86_64).exists()) {
            targetPlatform(targetWindowsX86_64, jdk_windows_x86_64)
        }
    }
    //Build using locally installed JDK only
    else {
        println("Building a single runtime image using locally installed JDK")
    }

    //Additional modules to include with auto-detected modules.
    modules = ['jdk.crypto.ec'] //jdk.crypto.ec needed for HTTPS connections (broadcastify calls & map tile server)

    //Use auto-detected modules and 'add' any specified modules.
    additive = true

    //Recommended options for reducing/shrinking runtime target image size
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    //Runtime images have auto appended version in image zip name.  Override to include version in single target image.
    imageZip = (hasTargetJdks | downloadJdks) ? file("$buildDir/image/sdr-trunk.zip") :
            file("$buildDir/image/sdr-trunk-" + version + ".zip")
}
