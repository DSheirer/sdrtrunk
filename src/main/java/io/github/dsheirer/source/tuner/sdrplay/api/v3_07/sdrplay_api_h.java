/*
 * *****************************************************************************
 * Copyright (C) 2014-2024 Dennis Sheirer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * ****************************************************************************
 */

// Generated by jextract

package io.github.dsheirer.source.tuner.sdrplay.api.v3_07;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.PaddingLayout;
import java.lang.foreign.SequenceLayout;
import java.lang.foreign.StructLayout;
import java.lang.foreign.SymbolLookup;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.util.Arrays;
import java.util.stream.Collectors;

import static java.lang.foreign.ValueLayout.JAVA_BYTE;

public class sdrplay_api_h {

    sdrplay_api_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    //jextract auto-generated code modified to wrap with exception handler for systems that don't have the library
    static SymbolLookup SYMBOL_LOOKUP;
    static
    {
        try
        {
            SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("sdrplay_api"), LIBRARY_ARENA)
                    .or(SymbolLookup.loaderLookup())
                    .or(Linker.nativeLinker().defaultLookup());
        }
        catch(Exception e)
        {
            SYMBOL_LOOKUP = null;
        }
    }

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int RSPIA_NUM_LNA_STATES = (int)10L;
    /**
     * {@snippet lang=c :
     * #define RSPIA_NUM_LNA_STATES 10
     * }
     */
    public static int RSPIA_NUM_LNA_STATES() {
        return RSPIA_NUM_LNA_STATES;
    }
    private static final int RSPIA_NUM_LNA_STATES_AM = (int)7L;
    /**
     * {@snippet lang=c :
     * #define RSPIA_NUM_LNA_STATES_AM 7
     * }
     */
    public static int RSPIA_NUM_LNA_STATES_AM() {
        return RSPIA_NUM_LNA_STATES_AM;
    }
    private static final int RSPIA_NUM_LNA_STATES_LBAND = (int)9L;
    /**
     * {@snippet lang=c :
     * #define RSPIA_NUM_LNA_STATES_LBAND 9
     * }
     */
    public static int RSPIA_NUM_LNA_STATES_LBAND() {
        return RSPIA_NUM_LNA_STATES_LBAND;
    }
    private static final int RSPII_NUM_LNA_STATES = (int)9L;
    /**
     * {@snippet lang=c :
     * #define RSPII_NUM_LNA_STATES 9
     * }
     */
    public static int RSPII_NUM_LNA_STATES() {
        return RSPII_NUM_LNA_STATES;
    }
    private static final int RSPII_NUM_LNA_STATES_AMPORT = (int)5L;
    /**
     * {@snippet lang=c :
     * #define RSPII_NUM_LNA_STATES_AMPORT 5
     * }
     */
    public static int RSPII_NUM_LNA_STATES_AMPORT() {
        return RSPII_NUM_LNA_STATES_AMPORT;
    }
    private static final int RSPII_NUM_LNA_STATES_420MHZ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define RSPII_NUM_LNA_STATES_420MHZ 6
     * }
     */
    public static int RSPII_NUM_LNA_STATES_420MHZ() {
        return RSPII_NUM_LNA_STATES_420MHZ;
    }
    private static final int RSPDUO_NUM_LNA_STATES = (int)10L;
    /**
     * {@snippet lang=c :
     * #define RSPDUO_NUM_LNA_STATES 10
     * }
     */
    public static int RSPDUO_NUM_LNA_STATES() {
        return RSPDUO_NUM_LNA_STATES;
    }
    private static final int RSPDUO_NUM_LNA_STATES_AMPORT = (int)5L;
    /**
     * {@snippet lang=c :
     * #define RSPDUO_NUM_LNA_STATES_AMPORT 5
     * }
     */
    public static int RSPDUO_NUM_LNA_STATES_AMPORT() {
        return RSPDUO_NUM_LNA_STATES_AMPORT;
    }
    private static final int RSPDUO_NUM_LNA_STATES_AM = (int)7L;
    /**
     * {@snippet lang=c :
     * #define RSPDUO_NUM_LNA_STATES_AM 7
     * }
     */
    public static int RSPDUO_NUM_LNA_STATES_AM() {
        return RSPDUO_NUM_LNA_STATES_AM;
    }
    private static final int RSPDUO_NUM_LNA_STATES_LBAND = (int)9L;
    /**
     * {@snippet lang=c :
     * #define RSPDUO_NUM_LNA_STATES_LBAND 9
     * }
     */
    public static int RSPDUO_NUM_LNA_STATES_LBAND() {
        return RSPDUO_NUM_LNA_STATES_LBAND;
    }
    private static final int RSPDX_NUM_LNA_STATES = (int)28L;
    /**
     * {@snippet lang=c :
     * #define RSPDX_NUM_LNA_STATES 28
     * }
     */
    public static int RSPDX_NUM_LNA_STATES() {
        return RSPDX_NUM_LNA_STATES;
    }
    private static final int RSPDX_NUM_LNA_STATES_AMPORT2_0_12 = (int)19L;
    /**
     * {@snippet lang=c :
     * #define RSPDX_NUM_LNA_STATES_AMPORT2_0_12 19
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_AMPORT2_0_12() {
        return RSPDX_NUM_LNA_STATES_AMPORT2_0_12;
    }
    private static final int RSPDX_NUM_LNA_STATES_AMPORT2_12_60 = (int)20L;
    /**
     * {@snippet lang=c :
     * #define RSPDX_NUM_LNA_STATES_AMPORT2_12_60 20
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_AMPORT2_12_60() {
        return RSPDX_NUM_LNA_STATES_AMPORT2_12_60;
    }
    private static final int RSPDX_NUM_LNA_STATES_VHF_BAND3 = (int)27L;
    /**
     * {@snippet lang=c :
     * #define RSPDX_NUM_LNA_STATES_VHF_BAND3 27
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_VHF_BAND3() {
        return RSPDX_NUM_LNA_STATES_VHF_BAND3;
    }
    private static final int RSPDX_NUM_LNA_STATES_420MHZ = (int)21L;
    /**
     * {@snippet lang=c :
     * #define RSPDX_NUM_LNA_STATES_420MHZ 21
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_420MHZ() {
        return RSPDX_NUM_LNA_STATES_420MHZ;
    }
    private static final int RSPDX_NUM_LNA_STATES_LBAND = (int)19L;
    /**
     * {@snippet lang=c :
     * #define RSPDX_NUM_LNA_STATES_LBAND 19
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_LBAND() {
        return RSPDX_NUM_LNA_STATES_LBAND;
    }
    private static final int RSPDX_NUM_LNA_STATES_DX = (int)26L;
    /**
     * {@snippet lang=c :
     * #define RSPDX_NUM_LNA_STATES_DX 26
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_DX() {
        return RSPDX_NUM_LNA_STATES_DX;
    }
    private static final int sdrplay_api_Rsp2_ANTENNA_A = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Rsp2_ANTENNA_A = 5
     * }
     */
    public static int sdrplay_api_Rsp2_ANTENNA_A() {
        return sdrplay_api_Rsp2_ANTENNA_A;
    }
    private static final int sdrplay_api_Rsp2_ANTENNA_B = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Rsp2_ANTENNA_B = 6
     * }
     */
    public static int sdrplay_api_Rsp2_ANTENNA_B() {
        return sdrplay_api_Rsp2_ANTENNA_B;
    }
    private static final int sdrplay_api_Rsp2_AMPORT_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Rsp2_AMPORT_1 = 1
     * }
     */
    public static int sdrplay_api_Rsp2_AMPORT_1() {
        return sdrplay_api_Rsp2_AMPORT_1;
    }
    private static final int sdrplay_api_Rsp2_AMPORT_2 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Rsp2_AMPORT_2 = 0
     * }
     */
    public static int sdrplay_api_Rsp2_AMPORT_2() {
        return sdrplay_api_Rsp2_AMPORT_2;
    }
    private static final int sdrplay_api_RspDuoMode_Unknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDuoMode_Unknown = 0
     * }
     */
    public static int sdrplay_api_RspDuoMode_Unknown() {
        return sdrplay_api_RspDuoMode_Unknown;
    }
    private static final int sdrplay_api_RspDuoMode_Single_Tuner = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDuoMode_Single_Tuner = 1
     * }
     */
    public static int sdrplay_api_RspDuoMode_Single_Tuner() {
        return sdrplay_api_RspDuoMode_Single_Tuner;
    }
    private static final int sdrplay_api_RspDuoMode_Dual_Tuner = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDuoMode_Dual_Tuner = 2
     * }
     */
    public static int sdrplay_api_RspDuoMode_Dual_Tuner() {
        return sdrplay_api_RspDuoMode_Dual_Tuner;
    }
    private static final int sdrplay_api_RspDuoMode_Master = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDuoMode_Master = 4
     * }
     */
    public static int sdrplay_api_RspDuoMode_Master() {
        return sdrplay_api_RspDuoMode_Master;
    }
    private static final int sdrplay_api_RspDuoMode_Slave = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDuoMode_Slave = 8
     * }
     */
    public static int sdrplay_api_RspDuoMode_Slave() {
        return sdrplay_api_RspDuoMode_Slave;
    }
    private static final int sdrplay_api_RspDuo_AMPORT_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDuo_AMPORT_1 = 1
     * }
     */
    public static int sdrplay_api_RspDuo_AMPORT_1() {
        return sdrplay_api_RspDuo_AMPORT_1;
    }
    private static final int sdrplay_api_RspDuo_AMPORT_2 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDuo_AMPORT_2 = 0
     * }
     */
    public static int sdrplay_api_RspDuo_AMPORT_2() {
        return sdrplay_api_RspDuo_AMPORT_2;
    }
    private static final int sdrplay_api_BW_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_BW_Undefined = 0
     * }
     */
    public static int sdrplay_api_BW_Undefined() {
        return sdrplay_api_BW_Undefined;
    }
    private static final int sdrplay_api_BW_0_200 = (int)200L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_BW_0_200 = 200
     * }
     */
    public static int sdrplay_api_BW_0_200() {
        return sdrplay_api_BW_0_200;
    }
    private static final int sdrplay_api_BW_0_300 = (int)300L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_BW_0_300 = 300
     * }
     */
    public static int sdrplay_api_BW_0_300() {
        return sdrplay_api_BW_0_300;
    }
    private static final int sdrplay_api_BW_0_600 = (int)600L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_BW_0_600 = 600
     * }
     */
    public static int sdrplay_api_BW_0_600() {
        return sdrplay_api_BW_0_600;
    }
    private static final int sdrplay_api_BW_1_536 = (int)1536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_BW_1_536 = 1536
     * }
     */
    public static int sdrplay_api_BW_1_536() {
        return sdrplay_api_BW_1_536;
    }
    private static final int sdrplay_api_BW_5_000 = (int)5000L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_BW_5_000 = 5000
     * }
     */
    public static int sdrplay_api_BW_5_000() {
        return sdrplay_api_BW_5_000;
    }
    private static final int sdrplay_api_BW_6_000 = (int)6000L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_BW_6_000 = 6000
     * }
     */
    public static int sdrplay_api_BW_6_000() {
        return sdrplay_api_BW_6_000;
    }
    private static final int sdrplay_api_BW_7_000 = (int)7000L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_BW_7_000 = 7000
     * }
     */
    public static int sdrplay_api_BW_7_000() {
        return sdrplay_api_BW_7_000;
    }
    private static final int sdrplay_api_BW_8_000 = (int)8000L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_BW_8_000 = 8000
     * }
     */
    public static int sdrplay_api_BW_8_000() {
        return sdrplay_api_BW_8_000;
    }
    private static final int sdrplay_api_IF_Undefined = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_IF_Undefined = -1
     * }
     */
    public static int sdrplay_api_IF_Undefined() {
        return sdrplay_api_IF_Undefined;
    }
    private static final int sdrplay_api_IF_Zero = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_IF_Zero = 0
     * }
     */
    public static int sdrplay_api_IF_Zero() {
        return sdrplay_api_IF_Zero;
    }
    private static final int sdrplay_api_IF_0_450 = (int)450L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_IF_0_450 = 450
     * }
     */
    public static int sdrplay_api_IF_0_450() {
        return sdrplay_api_IF_0_450;
    }
    private static final int sdrplay_api_IF_1_620 = (int)1620L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_IF_1_620 = 1620
     * }
     */
    public static int sdrplay_api_IF_1_620() {
        return sdrplay_api_IF_1_620;
    }
    private static final int sdrplay_api_IF_2_048 = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_IF_2_048 = 2048
     * }
     */
    public static int sdrplay_api_IF_2_048() {
        return sdrplay_api_IF_2_048;
    }
    private static final int sdrplay_api_LO_Undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_LO_Undefined = 0
     * }
     */
    public static int sdrplay_api_LO_Undefined() {
        return sdrplay_api_LO_Undefined;
    }
    private static final int sdrplay_api_LO_Auto = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_LO_Auto = 1
     * }
     */
    public static int sdrplay_api_LO_Auto() {
        return sdrplay_api_LO_Auto;
    }
    private static final int sdrplay_api_LO_120MHz = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_LO_120MHz = 2
     * }
     */
    public static int sdrplay_api_LO_120MHz() {
        return sdrplay_api_LO_120MHz;
    }
    private static final int sdrplay_api_LO_144MHz = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_LO_144MHz = 3
     * }
     */
    public static int sdrplay_api_LO_144MHz() {
        return sdrplay_api_LO_144MHz;
    }
    private static final int sdrplay_api_LO_168MHz = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_LO_168MHz = 4
     * }
     */
    public static int sdrplay_api_LO_168MHz() {
        return sdrplay_api_LO_168MHz;
    }
    private static final int sdrplay_api_EXTENDED_MIN_GR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_EXTENDED_MIN_GR = 0
     * }
     */
    public static int sdrplay_api_EXTENDED_MIN_GR() {
        return sdrplay_api_EXTENDED_MIN_GR;
    }
    private static final int sdrplay_api_NORMAL_MIN_GR = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_NORMAL_MIN_GR = 20
     * }
     */
    public static int sdrplay_api_NORMAL_MIN_GR() {
        return sdrplay_api_NORMAL_MIN_GR;
    }
    private static final int sdrplay_api_Tuner_Neither = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Tuner_Neither = 0
     * }
     */
    public static int sdrplay_api_Tuner_Neither() {
        return sdrplay_api_Tuner_Neither;
    }
    private static final int sdrplay_api_Tuner_A = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Tuner_A = 1
     * }
     */
    public static int sdrplay_api_Tuner_A() {
        return sdrplay_api_Tuner_A;
    }
    private static final int sdrplay_api_Tuner_B = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Tuner_B = 2
     * }
     */
    public static int sdrplay_api_Tuner_B() {
        return sdrplay_api_Tuner_B;
    }
    private static final int sdrplay_api_Tuner_Both = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Tuner_Both = 3
     * }
     */
    public static int sdrplay_api_Tuner_Both() {
        return sdrplay_api_Tuner_Both;
    }
    private static final int sdrplay_api_RspDx_ANTENNA_A = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDx_ANTENNA_A = 0
     * }
     */
    public static int sdrplay_api_RspDx_ANTENNA_A() {
        return sdrplay_api_RspDx_ANTENNA_A;
    }
    private static final int sdrplay_api_RspDx_ANTENNA_B = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDx_ANTENNA_B = 1
     * }
     */
    public static int sdrplay_api_RspDx_ANTENNA_B() {
        return sdrplay_api_RspDx_ANTENNA_B;
    }
    private static final int sdrplay_api_RspDx_ANTENNA_C = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDx_ANTENNA_C = 2
     * }
     */
    public static int sdrplay_api_RspDx_ANTENNA_C() {
        return sdrplay_api_RspDx_ANTENNA_C;
    }
    private static final int sdrplay_api_RspDx_HDRMODE_BW_0_200 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDx_HDRMODE_BW_0_200 = 0
     * }
     */
    public static int sdrplay_api_RspDx_HDRMODE_BW_0_200() {
        return sdrplay_api_RspDx_HDRMODE_BW_0_200;
    }
    private static final int sdrplay_api_RspDx_HDRMODE_BW_0_500 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDx_HDRMODE_BW_0_500 = 1
     * }
     */
    public static int sdrplay_api_RspDx_HDRMODE_BW_0_500() {
        return sdrplay_api_RspDx_HDRMODE_BW_0_500;
    }
    private static final int sdrplay_api_RspDx_HDRMODE_BW_1_200 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDx_HDRMODE_BW_1_200 = 2
     * }
     */
    public static int sdrplay_api_RspDx_HDRMODE_BW_1_200() {
        return sdrplay_api_RspDx_HDRMODE_BW_1_200;
    }
    private static final int sdrplay_api_RspDx_HDRMODE_BW_1_700 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDx_HDRMODE_BW_1_700 = 3
     * }
     */
    public static int sdrplay_api_RspDx_HDRMODE_BW_1_700() {
        return sdrplay_api_RspDx_HDRMODE_BW_1_700;
    }
    private static final int sdrplay_api_ISOCH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_ISOCH = 0
     * }
     */
    public static int sdrplay_api_ISOCH() {
        return sdrplay_api_ISOCH;
    }
    private static final int sdrplay_api_BULK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_BULK = 1
     * }
     */
    public static int sdrplay_api_BULK() {
        return sdrplay_api_BULK;
    }
    private static final int sdrplay_api_AGC_DISABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_AGC_DISABLE = 0
     * }
     */
    public static int sdrplay_api_AGC_DISABLE() {
        return sdrplay_api_AGC_DISABLE;
    }
    private static final int sdrplay_api_AGC_100HZ = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_AGC_100HZ = 1
     * }
     */
    public static int sdrplay_api_AGC_100HZ() {
        return sdrplay_api_AGC_100HZ;
    }
    private static final int sdrplay_api_AGC_50HZ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_AGC_50HZ = 2
     * }
     */
    public static int sdrplay_api_AGC_50HZ() {
        return sdrplay_api_AGC_50HZ;
    }
    private static final int sdrplay_api_AGC_5HZ = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_AGC_5HZ = 3
     * }
     */
    public static int sdrplay_api_AGC_5HZ() {
        return sdrplay_api_AGC_5HZ;
    }
    private static final int sdrplay_api_AGC_CTRL_EN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_AGC_CTRL_EN = 4
     * }
     */
    public static int sdrplay_api_AGC_CTRL_EN() {
        return sdrplay_api_AGC_CTRL_EN;
    }
    private static final int sdrplay_api_ADSB_DECIMATION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_ADSB_DECIMATION = 0
     * }
     */
    public static int sdrplay_api_ADSB_DECIMATION() {
        return sdrplay_api_ADSB_DECIMATION;
    }
    private static final int sdrplay_api_ADSB_NO_DECIMATION_LOWPASS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_ADSB_NO_DECIMATION_LOWPASS = 1
     * }
     */
    public static int sdrplay_api_ADSB_NO_DECIMATION_LOWPASS() {
        return sdrplay_api_ADSB_NO_DECIMATION_LOWPASS;
    }
    private static final int sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_2MHZ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_2MHZ = 2
     * }
     */
    public static int sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_2MHZ() {
        return sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_2MHZ;
    }
    private static final int sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_3MHZ = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_3MHZ = 3
     * }
     */
    public static int sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_3MHZ() {
        return sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_3MHZ;
    }
    private static final int sdrplay_api_Overload_Detected = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Overload_Detected = 0
     * }
     */
    public static int sdrplay_api_Overload_Detected() {
        return sdrplay_api_Overload_Detected;
    }
    private static final int sdrplay_api_Overload_Corrected = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Overload_Corrected = 1
     * }
     */
    public static int sdrplay_api_Overload_Corrected() {
        return sdrplay_api_Overload_Corrected;
    }
    private static final int sdrplay_api_MasterInitialised = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_MasterInitialised = 0
     * }
     */
    public static int sdrplay_api_MasterInitialised() {
        return sdrplay_api_MasterInitialised;
    }
    private static final int sdrplay_api_SlaveAttached = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_SlaveAttached = 1
     * }
     */
    public static int sdrplay_api_SlaveAttached() {
        return sdrplay_api_SlaveAttached;
    }
    private static final int sdrplay_api_SlaveDetached = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_SlaveDetached = 2
     * }
     */
    public static int sdrplay_api_SlaveDetached() {
        return sdrplay_api_SlaveDetached;
    }
    private static final int sdrplay_api_SlaveInitialised = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_SlaveInitialised = 3
     * }
     */
    public static int sdrplay_api_SlaveInitialised() {
        return sdrplay_api_SlaveInitialised;
    }
    private static final int sdrplay_api_SlaveUninitialised = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_SlaveUninitialised = 4
     * }
     */
    public static int sdrplay_api_SlaveUninitialised() {
        return sdrplay_api_SlaveUninitialised;
    }
    private static final int sdrplay_api_MasterDllDisappeared = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_MasterDllDisappeared = 5
     * }
     */
    public static int sdrplay_api_MasterDllDisappeared() {
        return sdrplay_api_MasterDllDisappeared;
    }
    private static final int sdrplay_api_SlaveDllDisappeared = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_SlaveDllDisappeared = 6
     * }
     */
    public static int sdrplay_api_SlaveDllDisappeared() {
        return sdrplay_api_SlaveDllDisappeared;
    }
    private static final int sdrplay_api_GainChange = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_GainChange = 0
     * }
     */
    public static int sdrplay_api_GainChange() {
        return sdrplay_api_GainChange;
    }
    private static final int sdrplay_api_PowerOverloadChange = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_PowerOverloadChange = 1
     * }
     */
    public static int sdrplay_api_PowerOverloadChange() {
        return sdrplay_api_PowerOverloadChange;
    }
    private static final int sdrplay_api_DeviceRemoved = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_DeviceRemoved = 2
     * }
     */
    public static int sdrplay_api_DeviceRemoved() {
        return sdrplay_api_DeviceRemoved;
    }
    private static final int sdrplay_api_RspDuoModeChange = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RspDuoModeChange = 3
     * }
     */
    public static int sdrplay_api_RspDuoModeChange() {
        return sdrplay_api_RspDuoModeChange;
    }
    /**
     * {@snippet lang=c :
     * typedef void *HANDLE
     * }
     */
    public static final AddressLayout HANDLE = sdrplay_api_h.C_POINTER;
    private static final int sdrplay_api_Success = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Success = 0
     * }
     */
    public static int sdrplay_api_Success() {
        return sdrplay_api_Success;
    }
    private static final int sdrplay_api_Fail = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Fail = 1
     * }
     */
    public static int sdrplay_api_Fail() {
        return sdrplay_api_Fail;
    }
    private static final int sdrplay_api_InvalidParam = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_InvalidParam = 2
     * }
     */
    public static int sdrplay_api_InvalidParam() {
        return sdrplay_api_InvalidParam;
    }
    private static final int sdrplay_api_OutOfRange = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_OutOfRange = 3
     * }
     */
    public static int sdrplay_api_OutOfRange() {
        return sdrplay_api_OutOfRange;
    }
    private static final int sdrplay_api_GainUpdateError = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_GainUpdateError = 4
     * }
     */
    public static int sdrplay_api_GainUpdateError() {
        return sdrplay_api_GainUpdateError;
    }
    private static final int sdrplay_api_RfUpdateError = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_RfUpdateError = 5
     * }
     */
    public static int sdrplay_api_RfUpdateError() {
        return sdrplay_api_RfUpdateError;
    }
    private static final int sdrplay_api_FsUpdateError = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_FsUpdateError = 6
     * }
     */
    public static int sdrplay_api_FsUpdateError() {
        return sdrplay_api_FsUpdateError;
    }
    private static final int sdrplay_api_HwError = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_HwError = 7
     * }
     */
    public static int sdrplay_api_HwError() {
        return sdrplay_api_HwError;
    }
    private static final int sdrplay_api_AliasingError = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_AliasingError = 8
     * }
     */
    public static int sdrplay_api_AliasingError() {
        return sdrplay_api_AliasingError;
    }
    private static final int sdrplay_api_AlreadyInitialised = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_AlreadyInitialised = 9
     * }
     */
    public static int sdrplay_api_AlreadyInitialised() {
        return sdrplay_api_AlreadyInitialised;
    }
    private static final int sdrplay_api_NotInitialised = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_NotInitialised = 10
     * }
     */
    public static int sdrplay_api_NotInitialised() {
        return sdrplay_api_NotInitialised;
    }
    private static final int sdrplay_api_NotEnabled = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_NotEnabled = 11
     * }
     */
    public static int sdrplay_api_NotEnabled() {
        return sdrplay_api_NotEnabled;
    }
    private static final int sdrplay_api_HwVerError = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_HwVerError = 12
     * }
     */
    public static int sdrplay_api_HwVerError() {
        return sdrplay_api_HwVerError;
    }
    private static final int sdrplay_api_OutOfMemError = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_OutOfMemError = 13
     * }
     */
    public static int sdrplay_api_OutOfMemError() {
        return sdrplay_api_OutOfMemError;
    }
    private static final int sdrplay_api_ServiceNotResponding = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_ServiceNotResponding = 14
     * }
     */
    public static int sdrplay_api_ServiceNotResponding() {
        return sdrplay_api_ServiceNotResponding;
    }
    private static final int sdrplay_api_StartPending = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_StartPending = 15
     * }
     */
    public static int sdrplay_api_StartPending() {
        return sdrplay_api_StartPending;
    }
    private static final int sdrplay_api_StopPending = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_StopPending = 16
     * }
     */
    public static int sdrplay_api_StopPending() {
        return sdrplay_api_StopPending;
    }
    private static final int sdrplay_api_InvalidMode = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_InvalidMode = 17
     * }
     */
    public static int sdrplay_api_InvalidMode() {
        return sdrplay_api_InvalidMode;
    }
    private static final int sdrplay_api_FailedVerification1 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_FailedVerification1 = 18
     * }
     */
    public static int sdrplay_api_FailedVerification1() {
        return sdrplay_api_FailedVerification1;
    }
    private static final int sdrplay_api_FailedVerification2 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_FailedVerification2 = 19
     * }
     */
    public static int sdrplay_api_FailedVerification2() {
        return sdrplay_api_FailedVerification2;
    }
    private static final int sdrplay_api_FailedVerification3 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_FailedVerification3 = 20
     * }
     */
    public static int sdrplay_api_FailedVerification3() {
        return sdrplay_api_FailedVerification3;
    }
    private static final int sdrplay_api_FailedVerification4 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_FailedVerification4 = 21
     * }
     */
    public static int sdrplay_api_FailedVerification4() {
        return sdrplay_api_FailedVerification4;
    }
    private static final int sdrplay_api_FailedVerification5 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_FailedVerification5 = 22
     * }
     */
    public static int sdrplay_api_FailedVerification5() {
        return sdrplay_api_FailedVerification5;
    }
    private static final int sdrplay_api_FailedVerification6 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_FailedVerification6 = 23
     * }
     */
    public static int sdrplay_api_FailedVerification6() {
        return sdrplay_api_FailedVerification6;
    }
    private static final int sdrplay_api_InvalidServiceVersion = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_InvalidServiceVersion = 24
     * }
     */
    public static int sdrplay_api_InvalidServiceVersion() {
        return sdrplay_api_InvalidServiceVersion;
    }
    private static final int sdrplay_api_Update_None = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_None = 0
     * }
     */
    public static int sdrplay_api_Update_None() {
        return sdrplay_api_Update_None;
    }
    private static final int sdrplay_api_Update_Dev_Fs = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Dev_Fs = 1
     * }
     */
    public static int sdrplay_api_Update_Dev_Fs() {
        return sdrplay_api_Update_Dev_Fs;
    }
    private static final int sdrplay_api_Update_Dev_Ppm = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Dev_Ppm = 2
     * }
     */
    public static int sdrplay_api_Update_Dev_Ppm() {
        return sdrplay_api_Update_Dev_Ppm;
    }
    private static final int sdrplay_api_Update_Dev_SyncUpdate = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Dev_SyncUpdate = 4
     * }
     */
    public static int sdrplay_api_Update_Dev_SyncUpdate() {
        return sdrplay_api_Update_Dev_SyncUpdate;
    }
    private static final int sdrplay_api_Update_Dev_ResetFlags = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Dev_ResetFlags = 8
     * }
     */
    public static int sdrplay_api_Update_Dev_ResetFlags() {
        return sdrplay_api_Update_Dev_ResetFlags;
    }
    private static final int sdrplay_api_Update_Rsp1a_BiasTControl = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Rsp1a_BiasTControl = 16
     * }
     */
    public static int sdrplay_api_Update_Rsp1a_BiasTControl() {
        return sdrplay_api_Update_Rsp1a_BiasTControl;
    }
    private static final int sdrplay_api_Update_Rsp1a_RfNotchControl = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Rsp1a_RfNotchControl = 32
     * }
     */
    public static int sdrplay_api_Update_Rsp1a_RfNotchControl() {
        return sdrplay_api_Update_Rsp1a_RfNotchControl;
    }
    private static final int sdrplay_api_Update_Rsp1a_RfDabNotchControl = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Rsp1a_RfDabNotchControl = 64
     * }
     */
    public static int sdrplay_api_Update_Rsp1a_RfDabNotchControl() {
        return sdrplay_api_Update_Rsp1a_RfDabNotchControl;
    }
    private static final int sdrplay_api_Update_Rsp2_BiasTControl = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Rsp2_BiasTControl = 128
     * }
     */
    public static int sdrplay_api_Update_Rsp2_BiasTControl() {
        return sdrplay_api_Update_Rsp2_BiasTControl;
    }
    private static final int sdrplay_api_Update_Rsp2_AmPortSelect = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Rsp2_AmPortSelect = 256
     * }
     */
    public static int sdrplay_api_Update_Rsp2_AmPortSelect() {
        return sdrplay_api_Update_Rsp2_AmPortSelect;
    }
    private static final int sdrplay_api_Update_Rsp2_AntennaControl = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Rsp2_AntennaControl = 512
     * }
     */
    public static int sdrplay_api_Update_Rsp2_AntennaControl() {
        return sdrplay_api_Update_Rsp2_AntennaControl;
    }
    private static final int sdrplay_api_Update_Rsp2_RfNotchControl = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Rsp2_RfNotchControl = 1024
     * }
     */
    public static int sdrplay_api_Update_Rsp2_RfNotchControl() {
        return sdrplay_api_Update_Rsp2_RfNotchControl;
    }
    private static final int sdrplay_api_Update_Rsp2_ExtRefControl = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Rsp2_ExtRefControl = 2048
     * }
     */
    public static int sdrplay_api_Update_Rsp2_ExtRefControl() {
        return sdrplay_api_Update_Rsp2_ExtRefControl;
    }
    private static final int sdrplay_api_Update_RspDuo_ExtRefControl = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDuo_ExtRefControl = 4096
     * }
     */
    public static int sdrplay_api_Update_RspDuo_ExtRefControl() {
        return sdrplay_api_Update_RspDuo_ExtRefControl;
    }
    private static final int sdrplay_api_Update_Master_Spare_1 = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Master_Spare_1 = 8192
     * }
     */
    public static int sdrplay_api_Update_Master_Spare_1() {
        return sdrplay_api_Update_Master_Spare_1;
    }
    private static final int sdrplay_api_Update_Master_Spare_2 = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Master_Spare_2 = 16384
     * }
     */
    public static int sdrplay_api_Update_Master_Spare_2() {
        return sdrplay_api_Update_Master_Spare_2;
    }
    private static final int sdrplay_api_Update_Tuner_Gr = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Tuner_Gr = 32768
     * }
     */
    public static int sdrplay_api_Update_Tuner_Gr() {
        return sdrplay_api_Update_Tuner_Gr;
    }
    private static final int sdrplay_api_Update_Tuner_GrLimits = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Tuner_GrLimits = 65536
     * }
     */
    public static int sdrplay_api_Update_Tuner_GrLimits() {
        return sdrplay_api_Update_Tuner_GrLimits;
    }
    private static final int sdrplay_api_Update_Tuner_Frf = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Tuner_Frf = 131072
     * }
     */
    public static int sdrplay_api_Update_Tuner_Frf() {
        return sdrplay_api_Update_Tuner_Frf;
    }
    private static final int sdrplay_api_Update_Tuner_BwType = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Tuner_BwType = 262144
     * }
     */
    public static int sdrplay_api_Update_Tuner_BwType() {
        return sdrplay_api_Update_Tuner_BwType;
    }
    private static final int sdrplay_api_Update_Tuner_IfType = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Tuner_IfType = 524288
     * }
     */
    public static int sdrplay_api_Update_Tuner_IfType() {
        return sdrplay_api_Update_Tuner_IfType;
    }
    private static final int sdrplay_api_Update_Tuner_DcOffset = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Tuner_DcOffset = 1048576
     * }
     */
    public static int sdrplay_api_Update_Tuner_DcOffset() {
        return sdrplay_api_Update_Tuner_DcOffset;
    }
    private static final int sdrplay_api_Update_Tuner_LoMode = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Tuner_LoMode = 2097152
     * }
     */
    public static int sdrplay_api_Update_Tuner_LoMode() {
        return sdrplay_api_Update_Tuner_LoMode;
    }
    private static final int sdrplay_api_Update_Ctrl_DCoffsetIQimbalance = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Ctrl_DCoffsetIQimbalance = 4194304
     * }
     */
    public static int sdrplay_api_Update_Ctrl_DCoffsetIQimbalance() {
        return sdrplay_api_Update_Ctrl_DCoffsetIQimbalance;
    }
    private static final int sdrplay_api_Update_Ctrl_Decimation = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Ctrl_Decimation = 8388608
     * }
     */
    public static int sdrplay_api_Update_Ctrl_Decimation() {
        return sdrplay_api_Update_Ctrl_Decimation;
    }
    private static final int sdrplay_api_Update_Ctrl_Agc = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Ctrl_Agc = 16777216
     * }
     */
    public static int sdrplay_api_Update_Ctrl_Agc() {
        return sdrplay_api_Update_Ctrl_Agc;
    }
    private static final int sdrplay_api_Update_Ctrl_AdsbMode = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Ctrl_AdsbMode = 33554432
     * }
     */
    public static int sdrplay_api_Update_Ctrl_AdsbMode() {
        return sdrplay_api_Update_Ctrl_AdsbMode;
    }
    private static final int sdrplay_api_Update_Ctrl_OverloadMsgAck = (int)67108864L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Ctrl_OverloadMsgAck = 67108864
     * }
     */
    public static int sdrplay_api_Update_Ctrl_OverloadMsgAck() {
        return sdrplay_api_Update_Ctrl_OverloadMsgAck;
    }
    private static final int sdrplay_api_Update_RspDuo_BiasTControl = (int)134217728L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDuo_BiasTControl = 134217728
     * }
     */
    public static int sdrplay_api_Update_RspDuo_BiasTControl() {
        return sdrplay_api_Update_RspDuo_BiasTControl;
    }
    private static final int sdrplay_api_Update_RspDuo_AmPortSelect = (int)268435456L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDuo_AmPortSelect = 268435456
     * }
     */
    public static int sdrplay_api_Update_RspDuo_AmPortSelect() {
        return sdrplay_api_Update_RspDuo_AmPortSelect;
    }
    private static final int sdrplay_api_Update_RspDuo_Tuner1AmNotchControl = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDuo_Tuner1AmNotchControl = 536870912
     * }
     */
    public static int sdrplay_api_Update_RspDuo_Tuner1AmNotchControl() {
        return sdrplay_api_Update_RspDuo_Tuner1AmNotchControl;
    }
    private static final int sdrplay_api_Update_RspDuo_RfNotchControl = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDuo_RfNotchControl = 1073741824
     * }
     */
    public static int sdrplay_api_Update_RspDuo_RfNotchControl() {
        return sdrplay_api_Update_RspDuo_RfNotchControl;
    }
    private static final int sdrplay_api_Update_RspDuo_RfDabNotchControl = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDuo_RfDabNotchControl = -2147483648
     * }
     */
    public static int sdrplay_api_Update_RspDuo_RfDabNotchControl() {
        return sdrplay_api_Update_RspDuo_RfDabNotchControl;
    }
    private static final int sdrplay_api_Update_Ext1_None = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_Ext1_None = 0
     * }
     */
    public static int sdrplay_api_Update_Ext1_None() {
        return sdrplay_api_Update_Ext1_None;
    }
    private static final int sdrplay_api_Update_RspDx_HdrEnable = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDx_HdrEnable = 1
     * }
     */
    public static int sdrplay_api_Update_RspDx_HdrEnable() {
        return sdrplay_api_Update_RspDx_HdrEnable;
    }
    private static final int sdrplay_api_Update_RspDx_BiasTControl = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDx_BiasTControl = 2
     * }
     */
    public static int sdrplay_api_Update_RspDx_BiasTControl() {
        return sdrplay_api_Update_RspDx_BiasTControl;
    }
    private static final int sdrplay_api_Update_RspDx_AntennaControl = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDx_AntennaControl = 4
     * }
     */
    public static int sdrplay_api_Update_RspDx_AntennaControl() {
        return sdrplay_api_Update_RspDx_AntennaControl;
    }
    private static final int sdrplay_api_Update_RspDx_RfNotchControl = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDx_RfNotchControl = 8
     * }
     */
    public static int sdrplay_api_Update_RspDx_RfNotchControl() {
        return sdrplay_api_Update_RspDx_RfNotchControl;
    }
    private static final int sdrplay_api_Update_RspDx_RfDabNotchControl = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDx_RfDabNotchControl = 16
     * }
     */
    public static int sdrplay_api_Update_RspDx_RfDabNotchControl() {
        return sdrplay_api_Update_RspDx_RfDabNotchControl;
    }
    private static final int sdrplay_api_Update_RspDx_HdrBw = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_Update_RspDx_HdrBw = 32
     * }
     */
    public static int sdrplay_api_Update_RspDx_HdrBw() {
        return sdrplay_api_Update_RspDx_HdrBw;
    }
    private static final int sdrplay_api_DbgLvl_Disable = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_DbgLvl_Disable = 0
     * }
     */
    public static int sdrplay_api_DbgLvl_Disable() {
        return sdrplay_api_DbgLvl_Disable;
    }
    private static final int sdrplay_api_DbgLvl_Verbose = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_DbgLvl_Verbose = 1
     * }
     */
    public static int sdrplay_api_DbgLvl_Verbose() {
        return sdrplay_api_DbgLvl_Verbose;
    }
    private static final int sdrplay_api_DbgLvl_Warning = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_DbgLvl_Warning = 2
     * }
     */
    public static int sdrplay_api_DbgLvl_Warning() {
        return sdrplay_api_DbgLvl_Warning;
    }
    private static final int sdrplay_api_DbgLvl_Error = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_DbgLvl_Error = 3
     * }
     */
    public static int sdrplay_api_DbgLvl_Error() {
        return sdrplay_api_DbgLvl_Error;
    }
    private static final int sdrplay_api_DbgLvl_Message = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.sdrplay_api_DbgLvl_Message = 4
     * }
     */
    public static int sdrplay_api_DbgLvl_Message() {
        return sdrplay_api_DbgLvl_Message;
    }

    private static class sdrplay_api_Open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT    );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_Open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Open()
     * }
     */
    public static FunctionDescriptor sdrplay_api_Open$descriptor() {
        return sdrplay_api_Open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Open()
     * }
     */
    public static MethodHandle sdrplay_api_Open$handle() {
        return sdrplay_api_Open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Open()
     * }
     */
    public static MemorySegment sdrplay_api_Open$address() {
        return sdrplay_api_Open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Open()
     * }
     */
    public static int sdrplay_api_Open() {
        var mh$ = sdrplay_api_Open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_Open");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_Close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT    );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_Close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Close()
     * }
     */
    public static FunctionDescriptor sdrplay_api_Close$descriptor() {
        return sdrplay_api_Close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Close()
     * }
     */
    public static MethodHandle sdrplay_api_Close$handle() {
        return sdrplay_api_Close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Close()
     * }
     */
    public static MemorySegment sdrplay_api_Close$address() {
        return sdrplay_api_Close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Close()
     * }
     */
    public static int sdrplay_api_Close() {
        var mh$ = sdrplay_api_Close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_Close");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_ApiVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_ApiVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_ApiVersion(float *apiVer)
     * }
     */
    public static FunctionDescriptor sdrplay_api_ApiVersion$descriptor() {
        return sdrplay_api_ApiVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_ApiVersion(float *apiVer)
     * }
     */
    public static MethodHandle sdrplay_api_ApiVersion$handle() {
        return sdrplay_api_ApiVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_ApiVersion(float *apiVer)
     * }
     */
    public static MemorySegment sdrplay_api_ApiVersion$address() {
        return sdrplay_api_ApiVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_ApiVersion(float *apiVer)
     * }
     */
    public static int sdrplay_api_ApiVersion(MemorySegment apiVer) {
        var mh$ = sdrplay_api_ApiVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_ApiVersion", apiVer);
            }
            return (int)mh$.invokeExact(apiVer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_LockDeviceApi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT    );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_LockDeviceApi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_LockDeviceApi()
     * }
     */
    public static FunctionDescriptor sdrplay_api_LockDeviceApi$descriptor() {
        return sdrplay_api_LockDeviceApi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_LockDeviceApi()
     * }
     */
    public static MethodHandle sdrplay_api_LockDeviceApi$handle() {
        return sdrplay_api_LockDeviceApi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_LockDeviceApi()
     * }
     */
    public static MemorySegment sdrplay_api_LockDeviceApi$address() {
        return sdrplay_api_LockDeviceApi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_LockDeviceApi()
     * }
     */
    public static int sdrplay_api_LockDeviceApi() {
        var mh$ = sdrplay_api_LockDeviceApi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_LockDeviceApi");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_UnlockDeviceApi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT    );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_UnlockDeviceApi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_UnlockDeviceApi()
     * }
     */
    public static FunctionDescriptor sdrplay_api_UnlockDeviceApi$descriptor() {
        return sdrplay_api_UnlockDeviceApi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_UnlockDeviceApi()
     * }
     */
    public static MethodHandle sdrplay_api_UnlockDeviceApi$handle() {
        return sdrplay_api_UnlockDeviceApi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_UnlockDeviceApi()
     * }
     */
    public static MemorySegment sdrplay_api_UnlockDeviceApi$address() {
        return sdrplay_api_UnlockDeviceApi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_UnlockDeviceApi()
     * }
     */
    public static int sdrplay_api_UnlockDeviceApi() {
        var mh$ = sdrplay_api_UnlockDeviceApi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_UnlockDeviceApi");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_GetDevices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_INT
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_GetDevices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_GetDevices(sdrplay_api_DeviceT *devices, unsigned int *numDevs, unsigned int maxDevs)
     * }
     */
    public static FunctionDescriptor sdrplay_api_GetDevices$descriptor() {
        return sdrplay_api_GetDevices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_GetDevices(sdrplay_api_DeviceT *devices, unsigned int *numDevs, unsigned int maxDevs)
     * }
     */
    public static MethodHandle sdrplay_api_GetDevices$handle() {
        return sdrplay_api_GetDevices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_GetDevices(sdrplay_api_DeviceT *devices, unsigned int *numDevs, unsigned int maxDevs)
     * }
     */
    public static MemorySegment sdrplay_api_GetDevices$address() {
        return sdrplay_api_GetDevices.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_GetDevices(sdrplay_api_DeviceT *devices, unsigned int *numDevs, unsigned int maxDevs)
     * }
     */
    public static int sdrplay_api_GetDevices(MemorySegment devices, MemorySegment numDevs, int maxDevs) {
        var mh$ = sdrplay_api_GetDevices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_GetDevices", devices, numDevs, maxDevs);
            }
            return (int)mh$.invokeExact(devices, numDevs, maxDevs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_SelectDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_SelectDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SelectDevice(sdrplay_api_DeviceT *device)
     * }
     */
    public static FunctionDescriptor sdrplay_api_SelectDevice$descriptor() {
        return sdrplay_api_SelectDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SelectDevice(sdrplay_api_DeviceT *device)
     * }
     */
    public static MethodHandle sdrplay_api_SelectDevice$handle() {
        return sdrplay_api_SelectDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SelectDevice(sdrplay_api_DeviceT *device)
     * }
     */
    public static MemorySegment sdrplay_api_SelectDevice$address() {
        return sdrplay_api_SelectDevice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SelectDevice(sdrplay_api_DeviceT *device)
     * }
     */
    public static int sdrplay_api_SelectDevice(MemorySegment device) {
        var mh$ = sdrplay_api_SelectDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_SelectDevice", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_ReleaseDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_ReleaseDevice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_ReleaseDevice(sdrplay_api_DeviceT *device)
     * }
     */
    public static FunctionDescriptor sdrplay_api_ReleaseDevice$descriptor() {
        return sdrplay_api_ReleaseDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_ReleaseDevice(sdrplay_api_DeviceT *device)
     * }
     */
    public static MethodHandle sdrplay_api_ReleaseDevice$handle() {
        return sdrplay_api_ReleaseDevice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_ReleaseDevice(sdrplay_api_DeviceT *device)
     * }
     */
    public static MemorySegment sdrplay_api_ReleaseDevice$address() {
        return sdrplay_api_ReleaseDevice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_ReleaseDevice(sdrplay_api_DeviceT *device)
     * }
     */
    public static int sdrplay_api_ReleaseDevice(MemorySegment device) {
        var mh$ = sdrplay_api_ReleaseDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_ReleaseDevice", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_GetErrorString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_INT
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_GetErrorString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *sdrplay_api_GetErrorString(sdrplay_api_ErrT err)
     * }
     */
    public static FunctionDescriptor sdrplay_api_GetErrorString$descriptor() {
        return sdrplay_api_GetErrorString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *sdrplay_api_GetErrorString(sdrplay_api_ErrT err)
     * }
     */
    public static MethodHandle sdrplay_api_GetErrorString$handle() {
        return sdrplay_api_GetErrorString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *sdrplay_api_GetErrorString(sdrplay_api_ErrT err)
     * }
     */
    public static MemorySegment sdrplay_api_GetErrorString$address() {
        return sdrplay_api_GetErrorString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *sdrplay_api_GetErrorString(sdrplay_api_ErrT err)
     * }
     */
    public static MemorySegment sdrplay_api_GetErrorString(int err) {
        var mh$ = sdrplay_api_GetErrorString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_GetErrorString", err);
            }
            return (MemorySegment)mh$.invokeExact(err);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_GetLastError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_GetLastError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrorInfoT *sdrplay_api_GetLastError(sdrplay_api_DeviceT *device)
     * }
     */
    public static FunctionDescriptor sdrplay_api_GetLastError$descriptor() {
        return sdrplay_api_GetLastError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrorInfoT *sdrplay_api_GetLastError(sdrplay_api_DeviceT *device)
     * }
     */
    public static MethodHandle sdrplay_api_GetLastError$handle() {
        return sdrplay_api_GetLastError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrorInfoT *sdrplay_api_GetLastError(sdrplay_api_DeviceT *device)
     * }
     */
    public static MemorySegment sdrplay_api_GetLastError$address() {
        return sdrplay_api_GetLastError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrorInfoT *sdrplay_api_GetLastError(sdrplay_api_DeviceT *device)
     * }
     */
    public static MemorySegment sdrplay_api_GetLastError(MemorySegment device) {
        var mh$ = sdrplay_api_GetLastError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_GetLastError", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_DisableHeartbeat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT    );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_DisableHeartbeat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_DisableHeartbeat()
     * }
     */
    public static FunctionDescriptor sdrplay_api_DisableHeartbeat$descriptor() {
        return sdrplay_api_DisableHeartbeat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_DisableHeartbeat()
     * }
     */
    public static MethodHandle sdrplay_api_DisableHeartbeat$handle() {
        return sdrplay_api_DisableHeartbeat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_DisableHeartbeat()
     * }
     */
    public static MemorySegment sdrplay_api_DisableHeartbeat$address() {
        return sdrplay_api_DisableHeartbeat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_DisableHeartbeat()
     * }
     */
    public static int sdrplay_api_DisableHeartbeat() {
        var mh$ = sdrplay_api_DisableHeartbeat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_DisableHeartbeat");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_DebugEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_INT
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_DebugEnable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_DebugEnable(HANDLE dev, sdrplay_api_DbgLvl_t enable)
     * }
     */
    public static FunctionDescriptor sdrplay_api_DebugEnable$descriptor() {
        return sdrplay_api_DebugEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_DebugEnable(HANDLE dev, sdrplay_api_DbgLvl_t enable)
     * }
     */
    public static MethodHandle sdrplay_api_DebugEnable$handle() {
        return sdrplay_api_DebugEnable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_DebugEnable(HANDLE dev, sdrplay_api_DbgLvl_t enable)
     * }
     */
    public static MemorySegment sdrplay_api_DebugEnable$address() {
        return sdrplay_api_DebugEnable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_DebugEnable(HANDLE dev, sdrplay_api_DbgLvl_t enable)
     * }
     */
    public static int sdrplay_api_DebugEnable(MemorySegment dev, int enable) {
        var mh$ = sdrplay_api_DebugEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_DebugEnable", dev, enable);
            }
            return (int)mh$.invokeExact(dev, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_GetDeviceParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_GetDeviceParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_GetDeviceParams(HANDLE dev, sdrplay_api_DeviceParamsT **deviceParams)
     * }
     */
    public static FunctionDescriptor sdrplay_api_GetDeviceParams$descriptor() {
        return sdrplay_api_GetDeviceParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_GetDeviceParams(HANDLE dev, sdrplay_api_DeviceParamsT **deviceParams)
     * }
     */
    public static MethodHandle sdrplay_api_GetDeviceParams$handle() {
        return sdrplay_api_GetDeviceParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_GetDeviceParams(HANDLE dev, sdrplay_api_DeviceParamsT **deviceParams)
     * }
     */
    public static MemorySegment sdrplay_api_GetDeviceParams$address() {
        return sdrplay_api_GetDeviceParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_GetDeviceParams(HANDLE dev, sdrplay_api_DeviceParamsT **deviceParams)
     * }
     */
    public static int sdrplay_api_GetDeviceParams(MemorySegment dev, MemorySegment deviceParams) {
        var mh$ = sdrplay_api_GetDeviceParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_GetDeviceParams", dev, deviceParams);
            }
            return (int)mh$.invokeExact(dev, deviceParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_Init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_Init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Init(HANDLE dev, sdrplay_api_CallbackFnsT *callbackFns, void *cbContext)
     * }
     */
    public static FunctionDescriptor sdrplay_api_Init$descriptor() {
        return sdrplay_api_Init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Init(HANDLE dev, sdrplay_api_CallbackFnsT *callbackFns, void *cbContext)
     * }
     */
    public static MethodHandle sdrplay_api_Init$handle() {
        return sdrplay_api_Init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Init(HANDLE dev, sdrplay_api_CallbackFnsT *callbackFns, void *cbContext)
     * }
     */
    public static MemorySegment sdrplay_api_Init$address() {
        return sdrplay_api_Init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Init(HANDLE dev, sdrplay_api_CallbackFnsT *callbackFns, void *cbContext)
     * }
     */
    public static int sdrplay_api_Init(MemorySegment dev, MemorySegment callbackFns, MemorySegment cbContext) {
        var mh$ = sdrplay_api_Init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_Init", dev, callbackFns, cbContext);
            }
            return (int)mh$.invokeExact(dev, callbackFns, cbContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_Uninit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_Uninit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Uninit(HANDLE dev)
     * }
     */
    public static FunctionDescriptor sdrplay_api_Uninit$descriptor() {
        return sdrplay_api_Uninit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Uninit(HANDLE dev)
     * }
     */
    public static MethodHandle sdrplay_api_Uninit$handle() {
        return sdrplay_api_Uninit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Uninit(HANDLE dev)
     * }
     */
    public static MemorySegment sdrplay_api_Uninit$address() {
        return sdrplay_api_Uninit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Uninit(HANDLE dev)
     * }
     */
    public static int sdrplay_api_Uninit(MemorySegment dev) {
        var mh$ = sdrplay_api_Uninit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_Uninit", dev);
            }
            return (int)mh$.invokeExact(dev);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_Update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_INT
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_Update");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Update(HANDLE dev, sdrplay_api_TunerSelectT tuner, sdrplay_api_ReasonForUpdateT reasonForUpdate, sdrplay_api_ReasonForUpdateExtension1T reasonForUpdateExt1)
     * }
     */
    public static FunctionDescriptor sdrplay_api_Update$descriptor() {
        return sdrplay_api_Update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Update(HANDLE dev, sdrplay_api_TunerSelectT tuner, sdrplay_api_ReasonForUpdateT reasonForUpdate, sdrplay_api_ReasonForUpdateExtension1T reasonForUpdateExt1)
     * }
     */
    public static MethodHandle sdrplay_api_Update$handle() {
        return sdrplay_api_Update.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Update(HANDLE dev, sdrplay_api_TunerSelectT tuner, sdrplay_api_ReasonForUpdateT reasonForUpdate, sdrplay_api_ReasonForUpdateExtension1T reasonForUpdateExt1)
     * }
     */
    public static MemorySegment sdrplay_api_Update$address() {
        return sdrplay_api_Update.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_Update(HANDLE dev, sdrplay_api_TunerSelectT tuner, sdrplay_api_ReasonForUpdateT reasonForUpdate, sdrplay_api_ReasonForUpdateExtension1T reasonForUpdateExt1)
     * }
     */
    public static int sdrplay_api_Update(MemorySegment dev, int tuner, int reasonForUpdate, int reasonForUpdateExt1) {
        var mh$ = sdrplay_api_Update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_Update", dev, tuner, reasonForUpdate, reasonForUpdateExt1);
            }
            return (int)mh$.invokeExact(dev, tuner, reasonForUpdate, reasonForUpdateExt1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_SwapRspDuoActiveTuner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_INT
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_SwapRspDuoActiveTuner");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoActiveTuner(HANDLE dev, sdrplay_api_TunerSelectT *currentTuner, sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel)
     * }
     */
    public static FunctionDescriptor sdrplay_api_SwapRspDuoActiveTuner$descriptor() {
        return sdrplay_api_SwapRspDuoActiveTuner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoActiveTuner(HANDLE dev, sdrplay_api_TunerSelectT *currentTuner, sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel)
     * }
     */
    public static MethodHandle sdrplay_api_SwapRspDuoActiveTuner$handle() {
        return sdrplay_api_SwapRspDuoActiveTuner.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoActiveTuner(HANDLE dev, sdrplay_api_TunerSelectT *currentTuner, sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel)
     * }
     */
    public static MemorySegment sdrplay_api_SwapRspDuoActiveTuner$address() {
        return sdrplay_api_SwapRspDuoActiveTuner.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoActiveTuner(HANDLE dev, sdrplay_api_TunerSelectT *currentTuner, sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel)
     * }
     */
    public static int sdrplay_api_SwapRspDuoActiveTuner(MemorySegment dev, MemorySegment currentTuner, int tuner1AmPortSel) {
        var mh$ = sdrplay_api_SwapRspDuoActiveTuner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_SwapRspDuoActiveTuner", dev, currentTuner, tuner1AmPortSel);
            }
            return (int)mh$.invokeExact(dev, currentTuner, tuner1AmPortSel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_SwapRspDuoDualTunerModeSampleRate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_SwapRspDuoDualTunerModeSampleRate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoDualTunerModeSampleRate(HANDLE dev, double *currentSampleRate)
     * }
     */
    public static FunctionDescriptor sdrplay_api_SwapRspDuoDualTunerModeSampleRate$descriptor() {
        return sdrplay_api_SwapRspDuoDualTunerModeSampleRate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoDualTunerModeSampleRate(HANDLE dev, double *currentSampleRate)
     * }
     */
    public static MethodHandle sdrplay_api_SwapRspDuoDualTunerModeSampleRate$handle() {
        return sdrplay_api_SwapRspDuoDualTunerModeSampleRate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoDualTunerModeSampleRate(HANDLE dev, double *currentSampleRate)
     * }
     */
    public static MemorySegment sdrplay_api_SwapRspDuoDualTunerModeSampleRate$address() {
        return sdrplay_api_SwapRspDuoDualTunerModeSampleRate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoDualTunerModeSampleRate(HANDLE dev, double *currentSampleRate)
     * }
     */
    public static int sdrplay_api_SwapRspDuoDualTunerModeSampleRate(MemorySegment dev, MemorySegment currentSampleRate) {
        var mh$ = sdrplay_api_SwapRspDuoDualTunerModeSampleRate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_SwapRspDuoDualTunerModeSampleRate", dev, currentSampleRate);
            }
            return (int)mh$.invokeExact(dev, currentSampleRate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sdrplay_api_SwapRspDuoMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_POINTER,
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_DOUBLE,
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_INT,
            sdrplay_api_h.C_INT
        );

        public static final MemorySegment ADDR = sdrplay_api_h.findOrThrow("sdrplay_api_SwapRspDuoMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoMode(sdrplay_api_DeviceT *currDevice, sdrplay_api_DeviceParamsT **deviceParams, sdrplay_api_RspDuoModeT rspDuoMode, double sampleRate, sdrplay_api_TunerSelectT tuner, sdrplay_api_Bw_MHzT bwType, sdrplay_api_If_kHzT ifType, sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel)
     * }
     */
    public static FunctionDescriptor sdrplay_api_SwapRspDuoMode$descriptor() {
        return sdrplay_api_SwapRspDuoMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoMode(sdrplay_api_DeviceT *currDevice, sdrplay_api_DeviceParamsT **deviceParams, sdrplay_api_RspDuoModeT rspDuoMode, double sampleRate, sdrplay_api_TunerSelectT tuner, sdrplay_api_Bw_MHzT bwType, sdrplay_api_If_kHzT ifType, sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel)
     * }
     */
    public static MethodHandle sdrplay_api_SwapRspDuoMode$handle() {
        return sdrplay_api_SwapRspDuoMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoMode(sdrplay_api_DeviceT *currDevice, sdrplay_api_DeviceParamsT **deviceParams, sdrplay_api_RspDuoModeT rspDuoMode, double sampleRate, sdrplay_api_TunerSelectT tuner, sdrplay_api_Bw_MHzT bwType, sdrplay_api_If_kHzT ifType, sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel)
     * }
     */
    public static MemorySegment sdrplay_api_SwapRspDuoMode$address() {
        return sdrplay_api_SwapRspDuoMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoMode(sdrplay_api_DeviceT *currDevice, sdrplay_api_DeviceParamsT **deviceParams, sdrplay_api_RspDuoModeT rspDuoMode, double sampleRate, sdrplay_api_TunerSelectT tuner, sdrplay_api_Bw_MHzT bwType, sdrplay_api_If_kHzT ifType, sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel)
     * }
     */
    public static int sdrplay_api_SwapRspDuoMode(MemorySegment currDevice, MemorySegment deviceParams, int rspDuoMode, double sampleRate, int tuner, int bwType, int ifType, int tuner1AmPortSel) {
        var mh$ = sdrplay_api_SwapRspDuoMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sdrplay_api_SwapRspDuoMode", currDevice, deviceParams, rspDuoMode, sampleRate, tuner, bwType, ifType, tuner1AmPortSel);
            }
            return (int)mh$.invokeExact(currDevice, deviceParams, rspDuoMode, sampleRate, tuner, bwType, ifType, tuner1AmPortSel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int MAX_BB_GR = (int)59L;
    /**
     * {@snippet lang=c :
     * #define MAX_BB_GR 59
     * }
     */
    public static int MAX_BB_GR() {
        return MAX_BB_GR;
    }
    private static final float SDRPLAY_API_VERSION = 3.069999933242798f;
    /**
     * {@snippet lang=c :
     * #define SDRPLAY_API_VERSION 3.069999933242798
     * }
     */
    public static float SDRPLAY_API_VERSION() {
        return SDRPLAY_API_VERSION;
    }
    private static final int SDRPLAY_MAX_DEVICES = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SDRPLAY_MAX_DEVICES 16
     * }
     */
    public static int SDRPLAY_MAX_DEVICES() {
        return SDRPLAY_MAX_DEVICES;
    }
    private static final int SDRPLAY_MAX_TUNERS_PER_DEVICE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SDRPLAY_MAX_TUNERS_PER_DEVICE 2
     * }
     */
    public static int SDRPLAY_MAX_TUNERS_PER_DEVICE() {
        return SDRPLAY_MAX_TUNERS_PER_DEVICE;
    }
    private static final int SDRPLAY_MAX_SER_NO_LEN = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SDRPLAY_MAX_SER_NO_LEN 64
     * }
     */
    public static int SDRPLAY_MAX_SER_NO_LEN() {
        return SDRPLAY_MAX_SER_NO_LEN;
    }
    private static final int SDRPLAY_MAX_ROOT_NM_LEN = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SDRPLAY_MAX_ROOT_NM_LEN 32
     * }
     */
    public static int SDRPLAY_MAX_ROOT_NM_LEN() {
        return SDRPLAY_MAX_ROOT_NM_LEN;
    }
    private static final int SDRPLAY_RSP1_ID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SDRPLAY_RSP1_ID 1
     * }
     */
    public static int SDRPLAY_RSP1_ID() {
        return SDRPLAY_RSP1_ID;
    }
    private static final int SDRPLAY_RSP1A_ID = (int)255L;
    /**
     * {@snippet lang=c :
     * #define SDRPLAY_RSP1A_ID 255
     * }
     */
    public static int SDRPLAY_RSP1A_ID() {
        return SDRPLAY_RSP1A_ID;
    }
    private static final int SDRPLAY_RSP2_ID = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SDRPLAY_RSP2_ID 2
     * }
     */
    public static int SDRPLAY_RSP2_ID() {
        return SDRPLAY_RSP2_ID;
    }
    private static final int SDRPLAY_RSPduo_ID = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SDRPLAY_RSPduo_ID 3
     * }
     */
    public static int SDRPLAY_RSPduo_ID() {
        return SDRPLAY_RSPduo_ID;
    }
    private static final int SDRPLAY_RSPdx_ID = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SDRPLAY_RSPdx_ID 4
     * }
     */
    public static int SDRPLAY_RSPdx_ID() {
        return SDRPLAY_RSPdx_ID;
    }
}

