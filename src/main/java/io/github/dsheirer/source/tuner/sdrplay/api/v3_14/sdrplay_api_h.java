/*
 * *****************************************************************************
 * Copyright (C) 2014-2024 Dennis Sheirer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * ****************************************************************************
 */

// Generated by jextract

package io.github.dsheirer.source.tuner.sdrplay.api.v3_14;

import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.OfAddress;
import static java.lang.foreign.ValueLayout.OfByte;
import static java.lang.foreign.ValueLayout.OfDouble;
import static java.lang.foreign.ValueLayout.OfFloat;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;
import static java.lang.foreign.ValueLayout.OfShort;
public class sdrplay_api_h  {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * #define RSPIA_NUM_LNA_STATES 10
     * }
     */
    public static int RSPIA_NUM_LNA_STATES() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define RSPIA_NUM_LNA_STATES_AM 7
     * }
     */
    public static int RSPIA_NUM_LNA_STATES_AM() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define RSPIA_NUM_LNA_STATES_LBAND 9
     * }
     */
    public static int RSPIA_NUM_LNA_STATES_LBAND() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define RSPII_NUM_LNA_STATES 9
     * }
     */
    public static int RSPII_NUM_LNA_STATES() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define RSPII_NUM_LNA_STATES_AMPORT 5
     * }
     */
    public static int RSPII_NUM_LNA_STATES_AMPORT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define RSPII_NUM_LNA_STATES_420MHZ 6
     * }
     */
    public static int RSPII_NUM_LNA_STATES_420MHZ() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define RSPDUO_NUM_LNA_STATES 10
     * }
     */
    public static int RSPDUO_NUM_LNA_STATES() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define RSPDUO_NUM_LNA_STATES_AMPORT 5
     * }
     */
    public static int RSPDUO_NUM_LNA_STATES_AMPORT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define RSPDUO_NUM_LNA_STATES_AM 7
     * }
     */
    public static int RSPDUO_NUM_LNA_STATES_AM() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define RSPDUO_NUM_LNA_STATES_LBAND 9
     * }
     */
    public static int RSPDUO_NUM_LNA_STATES_LBAND() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define RSPDX_NUM_LNA_STATES 28
     * }
     */
    public static int RSPDX_NUM_LNA_STATES() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define RSPDX_NUM_LNA_STATES_AMPORT2_0_12 19
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_AMPORT2_0_12() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define RSPDX_NUM_LNA_STATES_AMPORT2_12_50 20
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_AMPORT2_12_50() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define RSPDX_NUM_LNA_STATES_AMPORT2_50_60 25
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_AMPORT2_50_60() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define RSPDX_NUM_LNA_STATES_VHF_BAND3 27
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_VHF_BAND3() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define RSPDX_NUM_LNA_STATES_420MHZ 21
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_420MHZ() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define RSPDX_NUM_LNA_STATES_LBAND 19
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_LBAND() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define RSPDX_NUM_LNA_STATES_DX 22
     * }
     */
    public static int RSPDX_NUM_LNA_STATES_DX() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Rsp2_ANTENNA_A = 5;
     * }
     */
    public static int sdrplay_api_Rsp2_ANTENNA_A() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Rsp2_ANTENNA_B = 6;
     * }
     */
    public static int sdrplay_api_Rsp2_ANTENNA_B() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Rsp2_AMPORT_1 = 1;
     * }
     */
    public static int sdrplay_api_Rsp2_AMPORT_1() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Rsp2_AMPORT_2 = 0;
     * }
     */
    public static int sdrplay_api_Rsp2_AMPORT_2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDuoMode_Unknown = 0;
     * }
     */
    public static int sdrplay_api_RspDuoMode_Unknown() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDuoMode_Single_Tuner = 1;
     * }
     */
    public static int sdrplay_api_RspDuoMode_Single_Tuner() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDuoMode_Dual_Tuner = 2;
     * }
     */
    public static int sdrplay_api_RspDuoMode_Dual_Tuner() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDuoMode_Master = 4;
     * }
     */
    public static int sdrplay_api_RspDuoMode_Master() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDuoMode_Slave = 8;
     * }
     */
    public static int sdrplay_api_RspDuoMode_Slave() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDuo_AMPORT_1 = 1;
     * }
     */
    public static int sdrplay_api_RspDuo_AMPORT_1() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDuo_AMPORT_2 = 0;
     * }
     */
    public static int sdrplay_api_RspDuo_AMPORT_2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_BW_Undefined = 0;
     * }
     */
    public static int sdrplay_api_BW_Undefined() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_BW_0_200 = 200;
     * }
     */
    public static int sdrplay_api_BW_0_200() {
        return (int)200L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_BW_0_300 = 300;
     * }
     */
    public static int sdrplay_api_BW_0_300() {
        return (int)300L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_BW_0_600 = 600;
     * }
     */
    public static int sdrplay_api_BW_0_600() {
        return (int)600L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_BW_1_536 = 1536;
     * }
     */
    public static int sdrplay_api_BW_1_536() {
        return (int)1536L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_BW_5_000 = 5000;
     * }
     */
    public static int sdrplay_api_BW_5_000() {
        return (int)5000L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_BW_6_000 = 6000;
     * }
     */
    public static int sdrplay_api_BW_6_000() {
        return (int)6000L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_BW_7_000 = 7000;
     * }
     */
    public static int sdrplay_api_BW_7_000() {
        return (int)7000L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_BW_8_000 = 8000;
     * }
     */
    public static int sdrplay_api_BW_8_000() {
        return (int)8000L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_IF_Undefined = -1;
     * }
     */
    public static int sdrplay_api_IF_Undefined() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_IF_Zero = 0;
     * }
     */
    public static int sdrplay_api_IF_Zero() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_IF_0_450 = 450;
     * }
     */
    public static int sdrplay_api_IF_0_450() {
        return (int)450L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_IF_1_620 = 1620;
     * }
     */
    public static int sdrplay_api_IF_1_620() {
        return (int)1620L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_IF_2_048 = 2048;
     * }
     */
    public static int sdrplay_api_IF_2_048() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_LO_Undefined = 0;
     * }
     */
    public static int sdrplay_api_LO_Undefined() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_LO_Auto = 1;
     * }
     */
    public static int sdrplay_api_LO_Auto() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_LO_120MHz = 2;
     * }
     */
    public static int sdrplay_api_LO_120MHz() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_LO_144MHz = 3;
     * }
     */
    public static int sdrplay_api_LO_144MHz() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_LO_168MHz = 4;
     * }
     */
    public static int sdrplay_api_LO_168MHz() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_EXTENDED_MIN_GR = 0;
     * }
     */
    public static int sdrplay_api_EXTENDED_MIN_GR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_NORMAL_MIN_GR = 20;
     * }
     */
    public static int sdrplay_api_NORMAL_MIN_GR() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Tuner_Neither = 0;
     * }
     */
    public static int sdrplay_api_Tuner_Neither() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Tuner_A = 1;
     * }
     */
    public static int sdrplay_api_Tuner_A() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Tuner_B = 2;
     * }
     */
    public static int sdrplay_api_Tuner_B() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Tuner_Both = 3;
     * }
     */
    public static int sdrplay_api_Tuner_Both() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDx_ANTENNA_A = 0;
     * }
     */
    public static int sdrplay_api_RspDx_ANTENNA_A() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDx_ANTENNA_B = 1;
     * }
     */
    public static int sdrplay_api_RspDx_ANTENNA_B() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDx_ANTENNA_C = 2;
     * }
     */
    public static int sdrplay_api_RspDx_ANTENNA_C() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDx_HDRMODE_BW_0_200 = 0;
     * }
     */
    public static int sdrplay_api_RspDx_HDRMODE_BW_0_200() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDx_HDRMODE_BW_0_500 = 1;
     * }
     */
    public static int sdrplay_api_RspDx_HDRMODE_BW_0_500() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDx_HDRMODE_BW_1_200 = 2;
     * }
     */
    public static int sdrplay_api_RspDx_HDRMODE_BW_1_200() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDx_HDRMODE_BW_1_700 = 3;
     * }
     */
    public static int sdrplay_api_RspDx_HDRMODE_BW_1_700() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_ISOCH = 0;
     * }
     */
    public static int sdrplay_api_ISOCH() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_BULK = 1;
     * }
     */
    public static int sdrplay_api_BULK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_AGC_DISABLE = 0;
     * }
     */
    public static int sdrplay_api_AGC_DISABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_AGC_100HZ = 1;
     * }
     */
    public static int sdrplay_api_AGC_100HZ() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_AGC_50HZ = 2;
     * }
     */
    public static int sdrplay_api_AGC_50HZ() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_AGC_5HZ = 3;
     * }
     */
    public static int sdrplay_api_AGC_5HZ() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_AGC_CTRL_EN = 4;
     * }
     */
    public static int sdrplay_api_AGC_CTRL_EN() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_ADSB_DECIMATION = 0;
     * }
     */
    public static int sdrplay_api_ADSB_DECIMATION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_ADSB_NO_DECIMATION_LOWPASS = 1;
     * }
     */
    public static int sdrplay_api_ADSB_NO_DECIMATION_LOWPASS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_2MHZ = 2;
     * }
     */
    public static int sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_2MHZ() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_3MHZ = 3;
     * }
     */
    public static int sdrplay_api_ADSB_NO_DECIMATION_BANDPASS_3MHZ() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Overload_Detected = 0;
     * }
     */
    public static int sdrplay_api_Overload_Detected() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Overload_Corrected = 1;
     * }
     */
    public static int sdrplay_api_Overload_Corrected() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_MasterInitialised = 0;
     * }
     */
    public static int sdrplay_api_MasterInitialised() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_SlaveAttached = 1;
     * }
     */
    public static int sdrplay_api_SlaveAttached() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_SlaveDetached = 2;
     * }
     */
    public static int sdrplay_api_SlaveDetached() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_SlaveInitialised = 3;
     * }
     */
    public static int sdrplay_api_SlaveInitialised() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_SlaveUninitialised = 4;
     * }
     */
    public static int sdrplay_api_SlaveUninitialised() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_MasterDllDisappeared = 5;
     * }
     */
    public static int sdrplay_api_MasterDllDisappeared() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_SlaveDllDisappeared = 6;
     * }
     */
    public static int sdrplay_api_SlaveDllDisappeared() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_GainChange = 0;
     * }
     */
    public static int sdrplay_api_GainChange() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_PowerOverloadChange = 1;
     * }
     */
    public static int sdrplay_api_PowerOverloadChange() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_DeviceRemoved = 2;
     * }
     */
    public static int sdrplay_api_DeviceRemoved() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RspDuoModeChange = 3;
     * }
     */
    public static int sdrplay_api_RspDuoModeChange() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_DeviceFailure = 4;
     * }
     */
    public static int sdrplay_api_DeviceFailure() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * typedef void* HANDLE;
     * }
     */
    public static final OfAddress HANDLE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum .sdrplay_api_Success = 0;
     * }
     */
    public static int sdrplay_api_Success() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Fail = 1;
     * }
     */
    public static int sdrplay_api_Fail() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_InvalidParam = 2;
     * }
     */
    public static int sdrplay_api_InvalidParam() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_OutOfRange = 3;
     * }
     */
    public static int sdrplay_api_OutOfRange() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_GainUpdateError = 4;
     * }
     */
    public static int sdrplay_api_GainUpdateError() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_RfUpdateError = 5;
     * }
     */
    public static int sdrplay_api_RfUpdateError() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_FsUpdateError = 6;
     * }
     */
    public static int sdrplay_api_FsUpdateError() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_HwError = 7;
     * }
     */
    public static int sdrplay_api_HwError() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_AliasingError = 8;
     * }
     */
    public static int sdrplay_api_AliasingError() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_AlreadyInitialised = 9;
     * }
     */
    public static int sdrplay_api_AlreadyInitialised() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_NotInitialised = 10;
     * }
     */
    public static int sdrplay_api_NotInitialised() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_NotEnabled = 11;
     * }
     */
    public static int sdrplay_api_NotEnabled() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_HwVerError = 12;
     * }
     */
    public static int sdrplay_api_HwVerError() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_OutOfMemError = 13;
     * }
     */
    public static int sdrplay_api_OutOfMemError() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_ServiceNotResponding = 14;
     * }
     */
    public static int sdrplay_api_ServiceNotResponding() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_StartPending = 15;
     * }
     */
    public static int sdrplay_api_StartPending() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_StopPending = 16;
     * }
     */
    public static int sdrplay_api_StopPending() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_InvalidMode = 17;
     * }
     */
    public static int sdrplay_api_InvalidMode() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_FailedVerification1 = 18;
     * }
     */
    public static int sdrplay_api_FailedVerification1() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_FailedVerification2 = 19;
     * }
     */
    public static int sdrplay_api_FailedVerification2() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_FailedVerification3 = 20;
     * }
     */
    public static int sdrplay_api_FailedVerification3() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_FailedVerification4 = 21;
     * }
     */
    public static int sdrplay_api_FailedVerification4() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_FailedVerification5 = 22;
     * }
     */
    public static int sdrplay_api_FailedVerification5() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_FailedVerification6 = 23;
     * }
     */
    public static int sdrplay_api_FailedVerification6() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_InvalidServiceVersion = 24;
     * }
     */
    public static int sdrplay_api_InvalidServiceVersion() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_None = 0;
     * }
     */
    public static int sdrplay_api_Update_None() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Dev_Fs = 1;
     * }
     */
    public static int sdrplay_api_Update_Dev_Fs() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Dev_Ppm = 2;
     * }
     */
    public static int sdrplay_api_Update_Dev_Ppm() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Dev_SyncUpdate = 4;
     * }
     */
    public static int sdrplay_api_Update_Dev_SyncUpdate() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Dev_ResetFlags = 8;
     * }
     */
    public static int sdrplay_api_Update_Dev_ResetFlags() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Rsp1a_BiasTControl = 16;
     * }
     */
    public static int sdrplay_api_Update_Rsp1a_BiasTControl() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Rsp1a_RfNotchControl = 32;
     * }
     */
    public static int sdrplay_api_Update_Rsp1a_RfNotchControl() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Rsp1a_RfDabNotchControl = 64;
     * }
     */
    public static int sdrplay_api_Update_Rsp1a_RfDabNotchControl() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Rsp2_BiasTControl = 128;
     * }
     */
    public static int sdrplay_api_Update_Rsp2_BiasTControl() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Rsp2_AmPortSelect = 256;
     * }
     */
    public static int sdrplay_api_Update_Rsp2_AmPortSelect() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Rsp2_AntennaControl = 512;
     * }
     */
    public static int sdrplay_api_Update_Rsp2_AntennaControl() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Rsp2_RfNotchControl = 1024;
     * }
     */
    public static int sdrplay_api_Update_Rsp2_RfNotchControl() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Rsp2_ExtRefControl = 2048;
     * }
     */
    public static int sdrplay_api_Update_Rsp2_ExtRefControl() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDuo_ExtRefControl = 4096;
     * }
     */
    public static int sdrplay_api_Update_RspDuo_ExtRefControl() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Master_Spare_1 = 8192;
     * }
     */
    public static int sdrplay_api_Update_Master_Spare_1() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Master_Spare_2 = 16384;
     * }
     */
    public static int sdrplay_api_Update_Master_Spare_2() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Tuner_Gr = 32768;
     * }
     */
    public static int sdrplay_api_Update_Tuner_Gr() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Tuner_GrLimits = 65536;
     * }
     */
    public static int sdrplay_api_Update_Tuner_GrLimits() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Tuner_Frf = 131072;
     * }
     */
    public static int sdrplay_api_Update_Tuner_Frf() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Tuner_BwType = 262144;
     * }
     */
    public static int sdrplay_api_Update_Tuner_BwType() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Tuner_IfType = 524288;
     * }
     */
    public static int sdrplay_api_Update_Tuner_IfType() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Tuner_DcOffset = 1048576;
     * }
     */
    public static int sdrplay_api_Update_Tuner_DcOffset() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Tuner_LoMode = 2097152;
     * }
     */
    public static int sdrplay_api_Update_Tuner_LoMode() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Ctrl_DCoffsetIQimbalance = 4194304;
     * }
     */
    public static int sdrplay_api_Update_Ctrl_DCoffsetIQimbalance() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Ctrl_Decimation = 8388608;
     * }
     */
    public static int sdrplay_api_Update_Ctrl_Decimation() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Ctrl_Agc = 16777216;
     * }
     */
    public static int sdrplay_api_Update_Ctrl_Agc() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Ctrl_AdsbMode = 33554432;
     * }
     */
    public static int sdrplay_api_Update_Ctrl_AdsbMode() {
        return (int)33554432L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Ctrl_OverloadMsgAck = 67108864;
     * }
     */
    public static int sdrplay_api_Update_Ctrl_OverloadMsgAck() {
        return (int)67108864L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDuo_BiasTControl = 134217728;
     * }
     */
    public static int sdrplay_api_Update_RspDuo_BiasTControl() {
        return (int)134217728L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDuo_AmPortSelect = 268435456;
     * }
     */
    public static int sdrplay_api_Update_RspDuo_AmPortSelect() {
        return (int)268435456L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDuo_Tuner1AmNotchControl = 536870912;
     * }
     */
    public static int sdrplay_api_Update_RspDuo_Tuner1AmNotchControl() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDuo_RfNotchControl = 1073741824;
     * }
     */
    public static int sdrplay_api_Update_RspDuo_RfNotchControl() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDuo_RfDabNotchControl = -2147483648;
     * }
     */
    public static int sdrplay_api_Update_RspDuo_RfDabNotchControl() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_Ext1_None = 0;
     * }
     */
    public static int sdrplay_api_Update_Ext1_None() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDx_HdrEnable = 1;
     * }
     */
    public static int sdrplay_api_Update_RspDx_HdrEnable() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDx_BiasTControl = 2;
     * }
     */
    public static int sdrplay_api_Update_RspDx_BiasTControl() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDx_AntennaControl = 4;
     * }
     */
    public static int sdrplay_api_Update_RspDx_AntennaControl() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDx_RfNotchControl = 8;
     * }
     */
    public static int sdrplay_api_Update_RspDx_RfNotchControl() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDx_RfDabNotchControl = 16;
     * }
     */
    public static int sdrplay_api_Update_RspDx_RfDabNotchControl() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDx_HdrBw = 32;
     * }
     */
    public static int sdrplay_api_Update_RspDx_HdrBw() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_Update_RspDuo_ResetSlaveFlags = 64;
     * }
     */
    public static int sdrplay_api_Update_RspDuo_ResetSlaveFlags() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_DbgLvl_Disable = 0;
     * }
     */
    public static int sdrplay_api_DbgLvl_Disable() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_DbgLvl_Verbose = 1;
     * }
     */
    public static int sdrplay_api_DbgLvl_Verbose() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_DbgLvl_Warning = 2;
     * }
     */
    public static int sdrplay_api_DbgLvl_Warning() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_DbgLvl_Error = 3;
     * }
     */
    public static int sdrplay_api_DbgLvl_Error() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .sdrplay_api_DbgLvl_Message = 4;
     * }
     */
    public static int sdrplay_api_DbgLvl_Message() {
        return (int)4L;
    }
    public static MethodHandle sdrplay_api_Open$MH() {
        return RuntimeHelper.requireNonNull(constants$7.sdrplay_api_Open$MH,"sdrplay_api_Open");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_Open();
     * }
     */
    public static int sdrplay_api_Open() {
        var mh$ = sdrplay_api_Open$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_Close$MH() {
        return RuntimeHelper.requireNonNull(constants$7.sdrplay_api_Close$MH,"sdrplay_api_Close");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_Close();
     * }
     */
    public static int sdrplay_api_Close() {
        var mh$ = sdrplay_api_Close$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_ApiVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$7.sdrplay_api_ApiVersion$MH,"sdrplay_api_ApiVersion");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_ApiVersion(float* apiVer);
     * }
     */
    public static int sdrplay_api_ApiVersion(MemorySegment apiVer) {
        var mh$ = sdrplay_api_ApiVersion$MH();
        try {
            return (int)mh$.invokeExact(apiVer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_LockDeviceApi$MH() {
        return RuntimeHelper.requireNonNull(constants$7.sdrplay_api_LockDeviceApi$MH,"sdrplay_api_LockDeviceApi");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_LockDeviceApi();
     * }
     */
    public static int sdrplay_api_LockDeviceApi() {
        var mh$ = sdrplay_api_LockDeviceApi$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_UnlockDeviceApi$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sdrplay_api_UnlockDeviceApi$MH,"sdrplay_api_UnlockDeviceApi");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_UnlockDeviceApi();
     * }
     */
    public static int sdrplay_api_UnlockDeviceApi() {
        var mh$ = sdrplay_api_UnlockDeviceApi$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_GetDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sdrplay_api_GetDevices$MH,"sdrplay_api_GetDevices");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_GetDevices(sdrplay_api_DeviceT* devices, unsigned int* numDevs, unsigned int maxDevs);
     * }
     */
    public static int sdrplay_api_GetDevices(MemorySegment devices, MemorySegment numDevs, int maxDevs) {
        var mh$ = sdrplay_api_GetDevices$MH();
        try {
            return (int)mh$.invokeExact(devices, numDevs, maxDevs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_SelectDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sdrplay_api_SelectDevice$MH,"sdrplay_api_SelectDevice");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_SelectDevice(sdrplay_api_DeviceT* device);
     * }
     */
    public static int sdrplay_api_SelectDevice(MemorySegment device) {
        var mh$ = sdrplay_api_SelectDevice$MH();
        try {
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_ReleaseDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sdrplay_api_ReleaseDevice$MH,"sdrplay_api_ReleaseDevice");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_ReleaseDevice(sdrplay_api_DeviceT* device);
     * }
     */
    public static int sdrplay_api_ReleaseDevice(MemorySegment device) {
        var mh$ = sdrplay_api_ReleaseDevice$MH();
        try {
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_GetErrorString$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sdrplay_api_GetErrorString$MH,"sdrplay_api_GetErrorString");
    }
    /**
     * {@snippet :
     * char* sdrplay_api_GetErrorString(sdrplay_api_ErrT err);
     * }
     */
    public static MemorySegment sdrplay_api_GetErrorString(int err) {
        var mh$ = sdrplay_api_GetErrorString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_GetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sdrplay_api_GetLastError$MH,"sdrplay_api_GetLastError");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrorInfoT* sdrplay_api_GetLastError(sdrplay_api_DeviceT* device);
     * }
     */
    public static MemorySegment sdrplay_api_GetLastError(MemorySegment device) {
        var mh$ = sdrplay_api_GetLastError$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_GetLastErrorByType$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sdrplay_api_GetLastErrorByType$MH,"sdrplay_api_GetLastErrorByType");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrorInfoT* sdrplay_api_GetLastErrorByType(sdrplay_api_DeviceT* device, int type, unsigned long long* time);
     * }
     */
    public static MemorySegment sdrplay_api_GetLastErrorByType(MemorySegment device, int type, MemorySegment time) {
        var mh$ = sdrplay_api_GetLastErrorByType$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, type, time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_DisableHeartbeat$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sdrplay_api_DisableHeartbeat$MH,"sdrplay_api_DisableHeartbeat");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_DisableHeartbeat();
     * }
     */
    public static int sdrplay_api_DisableHeartbeat() {
        var mh$ = sdrplay_api_DisableHeartbeat$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_DebugEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sdrplay_api_DebugEnable$MH,"sdrplay_api_DebugEnable");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_DebugEnable(HANDLE dev, sdrplay_api_DbgLvl_t enable);
     * }
     */
    public static int sdrplay_api_DebugEnable(MemorySegment dev, int enable) {
        var mh$ = sdrplay_api_DebugEnable$MH();
        try {
            return (int)mh$.invokeExact(dev, enable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_GetDeviceParams$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sdrplay_api_GetDeviceParams$MH,"sdrplay_api_GetDeviceParams");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_GetDeviceParams(HANDLE dev, sdrplay_api_DeviceParamsT** deviceParams);
     * }
     */
    public static int sdrplay_api_GetDeviceParams(MemorySegment dev, MemorySegment deviceParams) {
        var mh$ = sdrplay_api_GetDeviceParams$MH();
        try {
            return (int)mh$.invokeExact(dev, deviceParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_Init$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sdrplay_api_Init$MH,"sdrplay_api_Init");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_Init(HANDLE dev, sdrplay_api_CallbackFnsT* callbackFns, void* cbContext);
     * }
     */
    public static int sdrplay_api_Init(MemorySegment dev, MemorySegment callbackFns, MemorySegment cbContext) {
        var mh$ = sdrplay_api_Init$MH();
        try {
            return (int)mh$.invokeExact(dev, callbackFns, cbContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_Uninit$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sdrplay_api_Uninit$MH,"sdrplay_api_Uninit");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_Uninit(HANDLE dev);
     * }
     */
    public static int sdrplay_api_Uninit(MemorySegment dev) {
        var mh$ = sdrplay_api_Uninit$MH();
        try {
            return (int)mh$.invokeExact(dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_Update$MH() {
        return RuntimeHelper.requireNonNull(constants$10.sdrplay_api_Update$MH,"sdrplay_api_Update");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_Update(HANDLE dev, sdrplay_api_TunerSelectT tuner, sdrplay_api_ReasonForUpdateT reasonForUpdate, sdrplay_api_ReasonForUpdateExtension1T reasonForUpdateExt1);
     * }
     */
    public static int sdrplay_api_Update(MemorySegment dev, int tuner, int reasonForUpdate, int reasonForUpdateExt1) {
        var mh$ = sdrplay_api_Update$MH();
        try {
            return (int)mh$.invokeExact(dev, tuner, reasonForUpdate, reasonForUpdateExt1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_SwapRspDuoActiveTuner$MH() {
        return RuntimeHelper.requireNonNull(constants$10.sdrplay_api_SwapRspDuoActiveTuner$MH,"sdrplay_api_SwapRspDuoActiveTuner");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoActiveTuner(HANDLE dev, sdrplay_api_TunerSelectT* currentTuner, sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel);
     * }
     */
    public static int sdrplay_api_SwapRspDuoActiveTuner(MemorySegment dev, MemorySegment currentTuner, int tuner1AmPortSel) {
        var mh$ = sdrplay_api_SwapRspDuoActiveTuner$MH();
        try {
            return (int)mh$.invokeExact(dev, currentTuner, tuner1AmPortSel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_SwapRspDuoDualTunerModeSampleRate$MH() {
        return RuntimeHelper.requireNonNull(constants$10.sdrplay_api_SwapRspDuoDualTunerModeSampleRate$MH,"sdrplay_api_SwapRspDuoDualTunerModeSampleRate");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoDualTunerModeSampleRate(HANDLE dev, double* currentSampleRate, double newSampleRate);
     * }
     */
    public static int sdrplay_api_SwapRspDuoDualTunerModeSampleRate(MemorySegment dev, MemorySegment currentSampleRate, double newSampleRate) {
        var mh$ = sdrplay_api_SwapRspDuoDualTunerModeSampleRate$MH();
        try {
            return (int)mh$.invokeExact(dev, currentSampleRate, newSampleRate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sdrplay_api_SwapRspDuoMode$MH() {
        return RuntimeHelper.requireNonNull(constants$10.sdrplay_api_SwapRspDuoMode$MH,"sdrplay_api_SwapRspDuoMode");
    }
    /**
     * {@snippet :
     * sdrplay_api_ErrT sdrplay_api_SwapRspDuoMode(sdrplay_api_DeviceT* currDevice, sdrplay_api_DeviceParamsT** deviceParams, sdrplay_api_RspDuoModeT rspDuoMode, double sampleRate, sdrplay_api_TunerSelectT tuner, sdrplay_api_Bw_MHzT bwType, sdrplay_api_If_kHzT ifType, sdrplay_api_RspDuo_AmPortSelectT tuner1AmPortSel);
     * }
     */
    public static int sdrplay_api_SwapRspDuoMode(MemorySegment currDevice, MemorySegment deviceParams, int rspDuoMode, double sampleRate, int tuner, int bwType, int ifType, int tuner1AmPortSel) {
        var mh$ = sdrplay_api_SwapRspDuoMode$MH();
        try {
            return (int)mh$.invokeExact(currDevice, deviceParams, rspDuoMode, sampleRate, tuner, bwType, ifType, tuner1AmPortSel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define MAX_BB_GR 59
     * }
     */
    public static int MAX_BB_GR() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * #define SDRPLAY_API_VERSION 3.140000104904175
     * }
     */
    public static float SDRPLAY_API_VERSION() {
        return 3.140000104904175f;
    }
    /**
     * {@snippet :
     * #define SDRPLAY_MAX_DEVICES 16
     * }
     */
    public static int SDRPLAY_MAX_DEVICES() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SDRPLAY_MAX_TUNERS_PER_DEVICE 2
     * }
     */
    public static int SDRPLAY_MAX_TUNERS_PER_DEVICE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDRPLAY_MAX_SER_NO_LEN 64
     * }
     */
    public static int SDRPLAY_MAX_SER_NO_LEN() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define SDRPLAY_MAX_ROOT_NM_LEN 32
     * }
     */
    public static int SDRPLAY_MAX_ROOT_NM_LEN() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define SDRPLAY_RSP1_ID 1
     * }
     */
    public static int SDRPLAY_RSP1_ID() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDRPLAY_RSP1A_ID 255
     * }
     */
    public static int SDRPLAY_RSP1A_ID() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define SDRPLAY_RSP2_ID 2
     * }
     */
    public static int SDRPLAY_RSP2_ID() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDRPLAY_RSPduo_ID 3
     * }
     */
    public static int SDRPLAY_RSPduo_ID() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SDRPLAY_RSPdx_ID 4
     * }
     */
    public static int SDRPLAY_RSPdx_ID() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SDRPLAY_RSP1B_ID 6
     * }
     */
    public static int SDRPLAY_RSP1B_ID() {
        return (int)6L;
    }

    //Note: RSPdx_R2 manually edited for API version 3.15

    /**
     * {@snippet :
     * #define SDRPLAY_RSPdx_R2_ID 7
     * }
     */
    public static int SDRPLAY_RSPdx_R2_ID() {
        return (int)7L;
    }
}


