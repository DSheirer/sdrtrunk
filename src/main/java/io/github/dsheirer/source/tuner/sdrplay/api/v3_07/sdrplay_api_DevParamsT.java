/*
 * *****************************************************************************
 * Copyright (C) 2014-2023 Dennis Sheirer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * ****************************************************************************
 */

// Generated by jextract

package io.github.dsheirer.source.tuner.sdrplay.api.v3_07;

import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryAddress;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.MemorySession;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
public class sdrplay_api_DevParamsT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_DOUBLE$LAYOUT.withName("ppm"),
        MemoryLayout.structLayout(
            Constants$root.C_DOUBLE$LAYOUT.withName("fsHz"),
            Constants$root.C_CHAR$LAYOUT.withName("syncUpdate"),
            Constants$root.C_CHAR$LAYOUT.withName("reCal"),
            MemoryLayout.paddingLayout(48)
        ).withName("fsFreq"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("sampleNum"),
            Constants$root.C_LONG$LAYOUT.withName("period")
        ).withName("syncUpdate"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("resetGainUpdate"),
            Constants$root.C_CHAR$LAYOUT.withName("resetRfUpdate"),
            Constants$root.C_CHAR$LAYOUT.withName("resetFsUpdate")
        ).withName("resetFlags"),
        MemoryLayout.paddingLayout(8),
        Constants$root.C_LONG$LAYOUT.withName("mode"),
        Constants$root.C_LONG$LAYOUT.withName("samplesPerPkt"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("rfNotchEnable"),
            Constants$root.C_CHAR$LAYOUT.withName("rfDabNotchEnable")
        ).withName("rsp1aParams"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("extRefOutputEn")
        ).withName("rsp2Params"),
        MemoryLayout.paddingLayout(8),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("extRefOutputEn")
        ).withName("rspDuoParams"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("hdrEnable"),
            Constants$root.C_CHAR$LAYOUT.withName("biasTEnable"),
            MemoryLayout.paddingLayout(16),
            Constants$root.C_LONG$LAYOUT.withName("antennaSel"),
            Constants$root.C_CHAR$LAYOUT.withName("rfNotchEnable"),
            Constants$root.C_CHAR$LAYOUT.withName("rfDabNotchEnable"),
            MemoryLayout.paddingLayout(16)
        ).withName("rspDxParams")
    );
    public static MemoryLayout $LAYOUT() {
        return sdrplay_api_DevParamsT.$struct$LAYOUT;
    }
    static final VarHandle ppm$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ppm"));
    public static VarHandle ppm$VH() {
        return sdrplay_api_DevParamsT.ppm$VH;
    }
    public static double ppm$get(MemorySegment seg) {
        return (double)sdrplay_api_DevParamsT.ppm$VH.get(seg);
    }
    public static void ppm$set( MemorySegment seg, double x) {
        sdrplay_api_DevParamsT.ppm$VH.set(seg, x);
    }
    public static double ppm$get(MemorySegment seg, long index) {
        return (double)sdrplay_api_DevParamsT.ppm$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ppm$set(MemorySegment seg, long index, double x) {
        sdrplay_api_DevParamsT.ppm$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment fsFreq$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static MemorySegment syncUpdate$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment resetFlags$slice(MemorySegment seg) {
        return seg.asSlice(32, 3);
    }
    static final VarHandle mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mode"));
    public static VarHandle mode$VH() {
        return sdrplay_api_DevParamsT.mode$VH;
    }
    public static int mode$get(MemorySegment seg) {
        return (int)sdrplay_api_DevParamsT.mode$VH.get(seg);
    }
    public static void mode$set( MemorySegment seg, int x) {
        sdrplay_api_DevParamsT.mode$VH.set(seg, x);
    }
    public static int mode$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_DevParamsT.mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mode$set(MemorySegment seg, long index, int x) {
        sdrplay_api_DevParamsT.mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle samplesPerPkt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("samplesPerPkt"));
    public static VarHandle samplesPerPkt$VH() {
        return sdrplay_api_DevParamsT.samplesPerPkt$VH;
    }
    public static int samplesPerPkt$get(MemorySegment seg) {
        return (int)sdrplay_api_DevParamsT.samplesPerPkt$VH.get(seg);
    }
    public static void samplesPerPkt$set( MemorySegment seg, int x) {
        sdrplay_api_DevParamsT.samplesPerPkt$VH.set(seg, x);
    }
    public static int samplesPerPkt$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_DevParamsT.samplesPerPkt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void samplesPerPkt$set(MemorySegment seg, long index, int x) {
        sdrplay_api_DevParamsT.samplesPerPkt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rsp1aParams$slice(MemorySegment seg) {
        return seg.asSlice(44, 2);
    }
    public static MemorySegment rsp2Params$slice(MemorySegment seg) {
        return seg.asSlice(46, 1);
    }
    public static MemorySegment rspDuoParams$slice(MemorySegment seg) {
        return seg.asSlice(48, 4);
    }
    public static MemorySegment rspDxParams$slice(MemorySegment seg) {
        return seg.asSlice(52, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


