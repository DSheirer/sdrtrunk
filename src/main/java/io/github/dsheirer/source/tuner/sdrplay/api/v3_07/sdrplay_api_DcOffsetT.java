/*
 * *****************************************************************************
 * Copyright (C) 2014-2024 Dennis Sheirer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * ****************************************************************************
 */

// Generated by jextract

package io.github.dsheirer.source.tuner.sdrplay.api.v3_07;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfByte;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned char DCenable;
 *     unsigned char IQenable;
 * }
 * }
 */
public class sdrplay_api_DcOffsetT {

    sdrplay_api_DcOffsetT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        sdrplay_api_h.C_CHAR.withName("DCenable"),
        sdrplay_api_h.C_CHAR.withName("IQenable")
    ).withName("$anon$23:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte DCenable$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DCenable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char DCenable
     * }
     */
    public static final OfByte DCenable$layout() {
        return DCenable$LAYOUT;
    }

    private static final long DCenable$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char DCenable
     * }
     */
    public static final long DCenable$offset() {
        return DCenable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char DCenable
     * }
     */
    public static byte DCenable(MemorySegment struct) {
        return struct.get(DCenable$LAYOUT, DCenable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char DCenable
     * }
     */
    public static void DCenable(MemorySegment struct, byte fieldValue) {
        struct.set(DCenable$LAYOUT, DCenable$OFFSET, fieldValue);
    }

    private static final OfByte IQenable$LAYOUT = (OfByte)$LAYOUT.select(groupElement("IQenable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char IQenable
     * }
     */
    public static final OfByte IQenable$layout() {
        return IQenable$LAYOUT;
    }

    private static final long IQenable$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char IQenable
     * }
     */
    public static final long IQenable$offset() {
        return IQenable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char IQenable
     * }
     */
    public static byte IQenable(MemorySegment struct) {
        return struct.get(IQenable$LAYOUT, IQenable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char IQenable
     * }
     */
    public static void IQenable(MemorySegment struct, byte fieldValue) {
        struct.set(IQenable$LAYOUT, IQenable$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

