/*
 * *****************************************************************************
 * Copyright (C) 2014-2024 Dennis Sheirer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * ****************************************************************************
 */

// Generated by jextract

package io.github.dsheirer.source.tuner.sdrplay.api.v3_08;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct {
 *     sdrplay_api_DcOffsetT dcOffset;
 *     sdrplay_api_DecimationT decimation;
 *     sdrplay_api_AgcT agc;
 *     sdrplay_api_AdsbModeT adsbMode;
 * }
 * }
 */
public class sdrplay_api_ControlParamsT {

    sdrplay_api_ControlParamsT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        sdrplay_api_DcOffsetT.layout().withName("dcOffset"),
        sdrplay_api_DecimationT.layout().withName("decimation"),
        MemoryLayout.paddingLayout(3),
        sdrplay_api_AgcT.layout().withName("agc"),
        sdrplay_api_h.C_INT.withName("adsbMode")
    ).withName("$anon$47:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout dcOffset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("dcOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sdrplay_api_DcOffsetT dcOffset
     * }
     */
    public static final GroupLayout dcOffset$layout() {
        return dcOffset$LAYOUT;
    }

    private static final long dcOffset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sdrplay_api_DcOffsetT dcOffset
     * }
     */
    public static final long dcOffset$offset() {
        return dcOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sdrplay_api_DcOffsetT dcOffset
     * }
     */
    public static MemorySegment dcOffset(MemorySegment struct) {
        return struct.asSlice(dcOffset$OFFSET, dcOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sdrplay_api_DcOffsetT dcOffset
     * }
     */
    public static void dcOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dcOffset$OFFSET, dcOffset$LAYOUT.byteSize());
    }

    private static final GroupLayout decimation$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("decimation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sdrplay_api_DecimationT decimation
     * }
     */
    public static final GroupLayout decimation$layout() {
        return decimation$LAYOUT;
    }

    private static final long decimation$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sdrplay_api_DecimationT decimation
     * }
     */
    public static final long decimation$offset() {
        return decimation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sdrplay_api_DecimationT decimation
     * }
     */
    public static MemorySegment decimation(MemorySegment struct) {
        return struct.asSlice(decimation$OFFSET, decimation$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sdrplay_api_DecimationT decimation
     * }
     */
    public static void decimation(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, decimation$OFFSET, decimation$LAYOUT.byteSize());
    }

    private static final GroupLayout agc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("agc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sdrplay_api_AgcT agc
     * }
     */
    public static final GroupLayout agc$layout() {
        return agc$LAYOUT;
    }

    private static final long agc$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sdrplay_api_AgcT agc
     * }
     */
    public static final long agc$offset() {
        return agc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sdrplay_api_AgcT agc
     * }
     */
    public static MemorySegment agc(MemorySegment struct) {
        return struct.asSlice(agc$OFFSET, agc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sdrplay_api_AgcT agc
     * }
     */
    public static void agc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, agc$OFFSET, agc$LAYOUT.byteSize());
    }

    private static final OfInt adsbMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("adsbMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sdrplay_api_AdsbModeT adsbMode
     * }
     */
    public static final OfInt adsbMode$layout() {
        return adsbMode$LAYOUT;
    }

    private static final long adsbMode$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sdrplay_api_AdsbModeT adsbMode
     * }
     */
    public static final long adsbMode$offset() {
        return adsbMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sdrplay_api_AdsbModeT adsbMode
     * }
     */
    public static int adsbMode(MemorySegment struct) {
        return struct.get(adsbMode$LAYOUT, adsbMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sdrplay_api_AdsbModeT adsbMode
     * }
     */
    public static void adsbMode(MemorySegment struct, int fieldValue) {
        struct.set(adsbMode$LAYOUT, adsbMode$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

