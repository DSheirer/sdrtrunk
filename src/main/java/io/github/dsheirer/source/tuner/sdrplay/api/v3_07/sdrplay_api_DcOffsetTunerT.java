/*
 * *****************************************************************************
 * Copyright (C) 2014-2024 Dennis Sheirer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * ****************************************************************************
 */

// Generated by jextract

package io.github.dsheirer.source.tuner.sdrplay.api.v3_07;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfByte;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct {
 *     unsigned char dcCal;
 *     unsigned char speedUp;
 *     int trackTime;
 *     int refreshRateTime;
 * }
 * }
 */
public class sdrplay_api_DcOffsetTunerT {

    sdrplay_api_DcOffsetTunerT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        sdrplay_api_h.C_CHAR.withName("dcCal"),
        sdrplay_api_h.C_CHAR.withName("speedUp"),
        MemoryLayout.paddingLayout(2),
        sdrplay_api_h.C_INT.withName("trackTime"),
        sdrplay_api_h.C_INT.withName("refreshRateTime")
    ).withName("$anon$75:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte dcCal$LAYOUT = (OfByte)$LAYOUT.select(groupElement("dcCal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char dcCal
     * }
     */
    public static final OfByte dcCal$layout() {
        return dcCal$LAYOUT;
    }

    private static final long dcCal$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char dcCal
     * }
     */
    public static final long dcCal$offset() {
        return dcCal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char dcCal
     * }
     */
    public static byte dcCal(MemorySegment struct) {
        return struct.get(dcCal$LAYOUT, dcCal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char dcCal
     * }
     */
    public static void dcCal(MemorySegment struct, byte fieldValue) {
        struct.set(dcCal$LAYOUT, dcCal$OFFSET, fieldValue);
    }

    private static final OfByte speedUp$LAYOUT = (OfByte)$LAYOUT.select(groupElement("speedUp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char speedUp
     * }
     */
    public static final OfByte speedUp$layout() {
        return speedUp$LAYOUT;
    }

    private static final long speedUp$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char speedUp
     * }
     */
    public static final long speedUp$offset() {
        return speedUp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char speedUp
     * }
     */
    public static byte speedUp(MemorySegment struct) {
        return struct.get(speedUp$LAYOUT, speedUp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char speedUp
     * }
     */
    public static void speedUp(MemorySegment struct, byte fieldValue) {
        struct.set(speedUp$LAYOUT, speedUp$OFFSET, fieldValue);
    }

    private static final OfInt trackTime$LAYOUT = (OfInt)$LAYOUT.select(groupElement("trackTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int trackTime
     * }
     */
    public static final OfInt trackTime$layout() {
        return trackTime$LAYOUT;
    }

    private static final long trackTime$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int trackTime
     * }
     */
    public static final long trackTime$offset() {
        return trackTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int trackTime
     * }
     */
    public static int trackTime(MemorySegment struct) {
        return struct.get(trackTime$LAYOUT, trackTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int trackTime
     * }
     */
    public static void trackTime(MemorySegment struct, int fieldValue) {
        struct.set(trackTime$LAYOUT, trackTime$OFFSET, fieldValue);
    }

    private static final OfInt refreshRateTime$LAYOUT = (OfInt)$LAYOUT.select(groupElement("refreshRateTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int refreshRateTime
     * }
     */
    public static final OfInt refreshRateTime$layout() {
        return refreshRateTime$LAYOUT;
    }

    private static final long refreshRateTime$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int refreshRateTime
     * }
     */
    public static final long refreshRateTime$offset() {
        return refreshRateTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int refreshRateTime
     * }
     */
    public static int refreshRateTime(MemorySegment struct) {
        return struct.get(refreshRateTime$LAYOUT, refreshRateTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int refreshRateTime
     * }
     */
    public static void refreshRateTime(MemorySegment struct, int fieldValue) {
        struct.set(refreshRateTime$LAYOUT, refreshRateTime$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

