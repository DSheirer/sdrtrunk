/*
 * *****************************************************************************
 * Copyright (C) 2014-2024 Dennis Sheirer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * ****************************************************************************
 */

// Generated by jextract

package io.github.dsheirer.source.tuner.sdrplay.api.v3_14;

import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SegmentScope;
import java.lang.foreign.UnionLayout;
/**
 * {@snippet :
 * union {
 *     sdrplay_api_GainCbParamT gainParams;
 *     sdrplay_api_PowerOverloadCbParamT powerOverloadParams;
 *     sdrplay_api_RspDuoModeCbParamT rspDuoModeParams;
 * };
 * }
 */
public class sdrplay_api_EventParamsT {

    static final UnionLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("gRdB"),
            Constants$root.C_INT$LAYOUT.withName("lnaGRdB"),
            Constants$root.C_DOUBLE$LAYOUT.withName("currGain")
        ).withName("gainParams"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("powerOverloadChangeType")
        ).withName("powerOverloadParams"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("modeChangeType")
        ).withName("rspDuoModeParams")
    );
    public static MemoryLayout $LAYOUT() {
        return sdrplay_api_EventParamsT.$union$LAYOUT;
    }
    public static MemorySegment gainParams$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment powerOverloadParams$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static MemorySegment rspDuoModeParams$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


