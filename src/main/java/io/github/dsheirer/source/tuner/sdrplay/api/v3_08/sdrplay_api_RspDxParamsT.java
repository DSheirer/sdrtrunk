/*
 * *****************************************************************************
 * Copyright (C) 2014-2023 Dennis Sheirer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * ****************************************************************************
 */

// Generated by jextract

package io.github.dsheirer.source.tuner.sdrplay.api.v3_08;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct {
 *     unsigned char hdrEnable;
 *     unsigned char biasTEnable;
 *     sdrplay_api_RspDx_AntennaSelectT antennaSel;
 *     unsigned char rfNotchEnable;
 *     unsigned char rfDabNotchEnable;
 * };
 * }
 */
public class sdrplay_api_RspDxParamsT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("hdrEnable"),
        Constants$root.C_CHAR$LAYOUT.withName("biasTEnable"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_INT$LAYOUT.withName("antennaSel"),
        Constants$root.C_CHAR$LAYOUT.withName("rfNotchEnable"),
        Constants$root.C_CHAR$LAYOUT.withName("rfDabNotchEnable"),
        MemoryLayout.paddingLayout(16)
    );
    public static MemoryLayout $LAYOUT() {
        return sdrplay_api_RspDxParamsT.$struct$LAYOUT;
    }
    static final VarHandle hdrEnable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hdrEnable"));
    public static VarHandle hdrEnable$VH() {
        return sdrplay_api_RspDxParamsT.hdrEnable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char hdrEnable;
     * }
     */
    public static byte hdrEnable$get(MemorySegment seg) {
        return (byte)sdrplay_api_RspDxParamsT.hdrEnable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char hdrEnable;
     * }
     */
    public static void hdrEnable$set(MemorySegment seg, byte x) {
        sdrplay_api_RspDxParamsT.hdrEnable$VH.set(seg, x);
    }
    public static byte hdrEnable$get(MemorySegment seg, long index) {
        return (byte)sdrplay_api_RspDxParamsT.hdrEnable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hdrEnable$set(MemorySegment seg, long index, byte x) {
        sdrplay_api_RspDxParamsT.hdrEnable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle biasTEnable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biasTEnable"));
    public static VarHandle biasTEnable$VH() {
        return sdrplay_api_RspDxParamsT.biasTEnable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char biasTEnable;
     * }
     */
    public static byte biasTEnable$get(MemorySegment seg) {
        return (byte)sdrplay_api_RspDxParamsT.biasTEnable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char biasTEnable;
     * }
     */
    public static void biasTEnable$set(MemorySegment seg, byte x) {
        sdrplay_api_RspDxParamsT.biasTEnable$VH.set(seg, x);
    }
    public static byte biasTEnable$get(MemorySegment seg, long index) {
        return (byte)sdrplay_api_RspDxParamsT.biasTEnable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biasTEnable$set(MemorySegment seg, long index, byte x) {
        sdrplay_api_RspDxParamsT.biasTEnable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle antennaSel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("antennaSel"));
    public static VarHandle antennaSel$VH() {
        return sdrplay_api_RspDxParamsT.antennaSel$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * sdrplay_api_RspDx_AntennaSelectT antennaSel;
     * }
     */
    public static int antennaSel$get(MemorySegment seg) {
        return (int)sdrplay_api_RspDxParamsT.antennaSel$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * sdrplay_api_RspDx_AntennaSelectT antennaSel;
     * }
     */
    public static void antennaSel$set(MemorySegment seg, int x) {
        sdrplay_api_RspDxParamsT.antennaSel$VH.set(seg, x);
    }
    public static int antennaSel$get(MemorySegment seg, long index) {
        return (int)sdrplay_api_RspDxParamsT.antennaSel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void antennaSel$set(MemorySegment seg, long index, int x) {
        sdrplay_api_RspDxParamsT.antennaSel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rfNotchEnable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rfNotchEnable"));
    public static VarHandle rfNotchEnable$VH() {
        return sdrplay_api_RspDxParamsT.rfNotchEnable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char rfNotchEnable;
     * }
     */
    public static byte rfNotchEnable$get(MemorySegment seg) {
        return (byte)sdrplay_api_RspDxParamsT.rfNotchEnable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char rfNotchEnable;
     * }
     */
    public static void rfNotchEnable$set(MemorySegment seg, byte x) {
        sdrplay_api_RspDxParamsT.rfNotchEnable$VH.set(seg, x);
    }
    public static byte rfNotchEnable$get(MemorySegment seg, long index) {
        return (byte)sdrplay_api_RspDxParamsT.rfNotchEnable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rfNotchEnable$set(MemorySegment seg, long index, byte x) {
        sdrplay_api_RspDxParamsT.rfNotchEnable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rfDabNotchEnable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rfDabNotchEnable"));
    public static VarHandle rfDabNotchEnable$VH() {
        return sdrplay_api_RspDxParamsT.rfDabNotchEnable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char rfDabNotchEnable;
     * }
     */
    public static byte rfDabNotchEnable$get(MemorySegment seg) {
        return (byte)sdrplay_api_RspDxParamsT.rfDabNotchEnable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char rfDabNotchEnable;
     * }
     */
    public static void rfDabNotchEnable$set(MemorySegment seg, byte x) {
        sdrplay_api_RspDxParamsT.rfDabNotchEnable$VH.set(seg, x);
    }
    public static byte rfDabNotchEnable$get(MemorySegment seg, long index) {
        return (byte)sdrplay_api_RspDxParamsT.rfDabNotchEnable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rfDabNotchEnable$set(MemorySegment seg, long index, byte x) {
        sdrplay_api_RspDxParamsT.rfDabNotchEnable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


