// Generated by jextract

package com.github.dsheirer.sdrplay.api.v3_08;

import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryAddress;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.MemorySession;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
public class sdrplay_api_CallbackFnsT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("StreamACbFn"),
        Constants$root.C_POINTER$LAYOUT.withName("StreamBCbFn"),
        Constants$root.C_POINTER$LAYOUT.withName("EventCbFn")
    );
    public static MemoryLayout $LAYOUT() {
        return sdrplay_api_CallbackFnsT.$struct$LAYOUT;
    }
    static final VarHandle StreamACbFn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StreamACbFn"));
    public static VarHandle StreamACbFn$VH() {
        return sdrplay_api_CallbackFnsT.StreamACbFn$VH;
    }
    public static MemoryAddress StreamACbFn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)sdrplay_api_CallbackFnsT.StreamACbFn$VH.get(seg);
    }
    public static void StreamACbFn$set( MemorySegment seg, MemoryAddress x) {
        sdrplay_api_CallbackFnsT.StreamACbFn$VH.set(seg, x);
    }
    public static MemoryAddress StreamACbFn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)sdrplay_api_CallbackFnsT.StreamACbFn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StreamACbFn$set(MemorySegment seg, long index, MemoryAddress x) {
        sdrplay_api_CallbackFnsT.StreamACbFn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static sdrplay_api_StreamCallback_t StreamACbFn (MemorySegment segment, MemorySession session) {
        return sdrplay_api_StreamCallback_t.ofAddress(StreamACbFn$get(segment), session);
    }
    static final VarHandle StreamBCbFn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StreamBCbFn"));
    public static VarHandle StreamBCbFn$VH() {
        return sdrplay_api_CallbackFnsT.StreamBCbFn$VH;
    }
    public static MemoryAddress StreamBCbFn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)sdrplay_api_CallbackFnsT.StreamBCbFn$VH.get(seg);
    }
    public static void StreamBCbFn$set( MemorySegment seg, MemoryAddress x) {
        sdrplay_api_CallbackFnsT.StreamBCbFn$VH.set(seg, x);
    }
    public static MemoryAddress StreamBCbFn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)sdrplay_api_CallbackFnsT.StreamBCbFn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StreamBCbFn$set(MemorySegment seg, long index, MemoryAddress x) {
        sdrplay_api_CallbackFnsT.StreamBCbFn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static sdrplay_api_StreamCallback_t StreamBCbFn (MemorySegment segment, MemorySession session) {
        return sdrplay_api_StreamCallback_t.ofAddress(StreamBCbFn$get(segment), session);
    }
    static final VarHandle EventCbFn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EventCbFn"));
    public static VarHandle EventCbFn$VH() {
        return sdrplay_api_CallbackFnsT.EventCbFn$VH;
    }
    public static MemoryAddress EventCbFn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)sdrplay_api_CallbackFnsT.EventCbFn$VH.get(seg);
    }
    public static void EventCbFn$set( MemorySegment seg, MemoryAddress x) {
        sdrplay_api_CallbackFnsT.EventCbFn$VH.set(seg, x);
    }
    public static MemoryAddress EventCbFn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)sdrplay_api_CallbackFnsT.EventCbFn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EventCbFn$set(MemorySegment seg, long index, MemoryAddress x) {
        sdrplay_api_CallbackFnsT.EventCbFn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static sdrplay_api_EventCallback_t EventCbFn (MemorySegment segment, MemorySession session) {
        return sdrplay_api_EventCallback_t.ofAddress(EventCbFn$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


